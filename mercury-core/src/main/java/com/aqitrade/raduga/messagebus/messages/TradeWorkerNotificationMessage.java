/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TradeWorkerNotificationMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TradeWorkerNotificationMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"brokerID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountId\",\"type\":\"long\"},{\"name\":\"accountAuthId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountPassword\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String brokerID;
  @Deprecated public long accountId;
  @Deprecated public String accountAuthId;
  @Deprecated public String accountPassword;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public TradeWorkerNotificationMessage() {}

  /**
   * All-args constructor.
   */
  public TradeWorkerNotificationMessage(String brokerID, Long accountId, String accountAuthId, String accountPassword) {
    this.brokerID = brokerID;
    this.accountId = accountId;
    this.accountAuthId = accountAuthId;
    this.accountPassword = accountPassword;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return brokerID;
    case 1: return accountId;
    case 2: return accountAuthId;
    case 3: return accountPassword;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: brokerID = (String)value$; break;
    case 1: accountId = (Long)value$; break;
    case 2: accountAuthId = (String)value$; break;
    case 3: accountPassword = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'brokerID' field.
   */
  public String getBrokerID() {
    return brokerID;
  }

  /**
   * Sets the value of the 'brokerID' field.
   * @param value the value to set.
   */
  public void setBrokerID(String value) {
    this.brokerID = value;
  }

  /**
   * Gets the value of the 'accountId' field.
   */
  public Long getAccountId() {
    return accountId;
  }

  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(Long value) {
    this.accountId = value;
  }

  /**
   * Gets the value of the 'accountAuthId' field.
   */
  public String getAccountAuthId() {
    return accountAuthId;
  }

  /**
   * Sets the value of the 'accountAuthId' field.
   * @param value the value to set.
   */
  public void setAccountAuthId(String value) {
    this.accountAuthId = value;
  }

  /**
   * Gets the value of the 'accountPassword' field.
   */
  public String getAccountPassword() {
    return accountPassword;
  }

  /**
   * Sets the value of the 'accountPassword' field.
   * @param value the value to set.
   */
  public void setAccountPassword(String value) {
    this.accountPassword = value;
  }

  /** Creates a new TradeWorkerNotificationMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new TradeWorkerNotificationMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new TradeWorkerNotificationMessage RecordBuilder by copying an existing TradeWorkerNotificationMessage instance */
  public static Builder newBuilder(TradeWorkerNotificationMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for TradeWorkerNotificationMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TradeWorkerNotificationMessage>
    implements org.apache.avro.data.RecordBuilder<TradeWorkerNotificationMessage> {

    private String brokerID;
    private long accountId;
    private String accountAuthId;
    private String accountPassword;

    /** Creates a new Builder */
    private Builder() {
      super(TradeWorkerNotificationMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.brokerID)) {
        this.brokerID = data().deepCopy(fields()[0].schema(), other.brokerID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountId)) {
        this.accountId = data().deepCopy(fields()[1].schema(), other.accountId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountAuthId)) {
        this.accountAuthId = data().deepCopy(fields()[2].schema(), other.accountAuthId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountPassword)) {
        this.accountPassword = data().deepCopy(fields()[3].schema(), other.accountPassword);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TradeWorkerNotificationMessage instance */
    private Builder(TradeWorkerNotificationMessage other) {
            super(TradeWorkerNotificationMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.brokerID)) {
        this.brokerID = data().deepCopy(fields()[0].schema(), other.brokerID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountId)) {
        this.accountId = data().deepCopy(fields()[1].schema(), other.accountId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountAuthId)) {
        this.accountAuthId = data().deepCopy(fields()[2].schema(), other.accountAuthId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountPassword)) {
        this.accountPassword = data().deepCopy(fields()[3].schema(), other.accountPassword);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'brokerID' field */
    public String getBrokerID() {
      return brokerID;
    }
    
    /** Sets the value of the 'brokerID' field */
    public Builder setBrokerID(String value) {
      validate(fields()[0], value);
      this.brokerID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'brokerID' field has been set */
    public boolean hasBrokerID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'brokerID' field */
    public Builder clearBrokerID() {
      brokerID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'accountId' field */
    public Long getAccountId() {
      return accountId;
    }
    
    /** Sets the value of the 'accountId' field */
    public Builder setAccountId(long value) {
      validate(fields()[1], value);
      this.accountId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'accountId' field has been set */
    public boolean hasAccountId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'accountId' field */
    public Builder clearAccountId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'accountAuthId' field */
    public String getAccountAuthId() {
      return accountAuthId;
    }
    
    /** Sets the value of the 'accountAuthId' field */
    public Builder setAccountAuthId(String value) {
      validate(fields()[2], value);
      this.accountAuthId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'accountAuthId' field has been set */
    public boolean hasAccountAuthId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'accountAuthId' field */
    public Builder clearAccountAuthId() {
      accountAuthId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'accountPassword' field */
    public String getAccountPassword() {
      return accountPassword;
    }
    
    /** Sets the value of the 'accountPassword' field */
    public Builder setAccountPassword(String value) {
      validate(fields()[3], value);
      this.accountPassword = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'accountPassword' field has been set */
    public boolean hasAccountPassword() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'accountPassword' field */
    public Builder clearAccountPassword() {
      accountPassword = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public TradeWorkerNotificationMessage build() {
      try {
        TradeWorkerNotificationMessage record = new TradeWorkerNotificationMessage();
        record.brokerID = fieldSetFlags()[0] ? this.brokerID : (String) defaultValue(fields()[0]);
        record.accountId = fieldSetFlags()[1] ? this.accountId : (Long) defaultValue(fields()[1]);
        record.accountAuthId = fieldSetFlags()[2] ? this.accountAuthId : (String) defaultValue(fields()[2]);
        record.accountPassword = fieldSetFlags()[3] ? this.accountPassword : (String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
