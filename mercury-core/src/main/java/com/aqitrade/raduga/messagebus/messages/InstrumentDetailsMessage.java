/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class InstrumentDetailsMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InstrumentDetailsMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"brokerID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instrumentList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InstrumentDetails\",\"fields\":[{\"name\":\"exchangeID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instrumentName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"unitSize\",\"type\":\"int\"},{\"name\":\"priceTick\",\"type\":\"double\"},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"openDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"expireDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String brokerID;
  @Deprecated public java.util.List<InstrumentDetails> instrumentList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public InstrumentDetailsMessage() {}

  /**
   * All-args constructor.
   */
  public InstrumentDetailsMessage(String brokerID, java.util.List<InstrumentDetails> instrumentList) {
    this.brokerID = brokerID;
    this.instrumentList = instrumentList;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return brokerID;
    case 1: return instrumentList;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: brokerID = (String)value$; break;
    case 1: instrumentList = (java.util.List<InstrumentDetails>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'brokerID' field.
   */
  public String getBrokerID() {
    return brokerID;
  }

  /**
   * Sets the value of the 'brokerID' field.
   * @param value the value to set.
   */
  public void setBrokerID(String value) {
    this.brokerID = value;
  }

  /**
   * Gets the value of the 'instrumentList' field.
   */
  public java.util.List<InstrumentDetails> getInstrumentList() {
    return instrumentList;
  }

  /**
   * Sets the value of the 'instrumentList' field.
   * @param value the value to set.
   */
  public void setInstrumentList(java.util.List<InstrumentDetails> value) {
    this.instrumentList = value;
  }

  /** Creates a new InstrumentDetailsMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new InstrumentDetailsMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new InstrumentDetailsMessage RecordBuilder by copying an existing InstrumentDetailsMessage instance */
  public static Builder newBuilder(InstrumentDetailsMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for InstrumentDetailsMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InstrumentDetailsMessage>
    implements org.apache.avro.data.RecordBuilder<InstrumentDetailsMessage> {

    private String brokerID;
    private java.util.List<InstrumentDetails> instrumentList;

    /** Creates a new Builder */
    private Builder() {
      super(InstrumentDetailsMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.brokerID)) {
        this.brokerID = data().deepCopy(fields()[0].schema(), other.brokerID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentList)) {
        this.instrumentList = data().deepCopy(fields()[1].schema(), other.instrumentList);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing InstrumentDetailsMessage instance */
    private Builder(InstrumentDetailsMessage other) {
            super(InstrumentDetailsMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.brokerID)) {
        this.brokerID = data().deepCopy(fields()[0].schema(), other.brokerID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentList)) {
        this.instrumentList = data().deepCopy(fields()[1].schema(), other.instrumentList);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'brokerID' field */
    public String getBrokerID() {
      return brokerID;
    }
    
    /** Sets the value of the 'brokerID' field */
    public Builder setBrokerID(String value) {
      validate(fields()[0], value);
      this.brokerID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'brokerID' field has been set */
    public boolean hasBrokerID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'brokerID' field */
    public Builder clearBrokerID() {
      brokerID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'instrumentList' field */
    public java.util.List<InstrumentDetails> getInstrumentList() {
      return instrumentList;
    }
    
    /** Sets the value of the 'instrumentList' field */
    public Builder setInstrumentList(java.util.List<InstrumentDetails> value) {
      validate(fields()[1], value);
      this.instrumentList = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'instrumentList' field has been set */
    public boolean hasInstrumentList() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'instrumentList' field */
    public Builder clearInstrumentList() {
      instrumentList = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public InstrumentDetailsMessage build() {
      try {
        InstrumentDetailsMessage record = new InstrumentDetailsMessage();
        record.brokerID = fieldSetFlags()[0] ? this.brokerID : (String) defaultValue(fields()[0]);
        record.instrumentList = fieldSetFlags()[1] ? this.instrumentList : (java.util.List<InstrumentDetails>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
