/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ApplicationSignalMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApplicationSignalMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"signalID\",\"type\":\"long\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"signalType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"portfolioID\",\"type\":\"long\"},{\"name\":\"expirationDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"applicationID\",\"type\":\"long\"},{\"name\":\"priority\",\"type\":\"int\"},{\"name\":\"read\",\"type\":\"boolean\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long signalID;
  @Deprecated public String title;
  @Deprecated public String signalType;
  @Deprecated public String createDate;
  @Deprecated public long portfolioID;
  @Deprecated public String expirationDate;
  @Deprecated public long applicationID;
  @Deprecated public int priority;
  @Deprecated public boolean read;
  @Deprecated public String value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public ApplicationSignalMessage() {}

  /**
   * All-args constructor.
   */
  public ApplicationSignalMessage(Long signalID, String title, String signalType, String createDate, Long portfolioID, String expirationDate, Long applicationID, Integer priority, Boolean read, String value) {
    this.signalID = signalID;
    this.title = title;
    this.signalType = signalType;
    this.createDate = createDate;
    this.portfolioID = portfolioID;
    this.expirationDate = expirationDate;
    this.applicationID = applicationID;
    this.priority = priority;
    this.read = read;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return signalID;
    case 1: return title;
    case 2: return signalType;
    case 3: return createDate;
    case 4: return portfolioID;
    case 5: return expirationDate;
    case 6: return applicationID;
    case 7: return priority;
    case 8: return read;
    case 9: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: signalID = (Long)value$; break;
    case 1: title = (String)value$; break;
    case 2: signalType = (String)value$; break;
    case 3: createDate = (String)value$; break;
    case 4: portfolioID = (Long)value$; break;
    case 5: expirationDate = (String)value$; break;
    case 6: applicationID = (Long)value$; break;
    case 7: priority = (Integer)value$; break;
    case 8: read = (Boolean)value$; break;
    case 9: value = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'signalID' field.
   */
  public Long getSignalID() {
    return signalID;
  }

  /**
   * Sets the value of the 'signalID' field.
   * @param value the value to set.
   */
  public void setSignalID(Long value) {
    this.signalID = value;
  }

  /**
   * Gets the value of the 'title' field.
   */
  public String getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'signalType' field.
   */
  public String getSignalType() {
    return signalType;
  }

  /**
   * Sets the value of the 'signalType' field.
   * @param value the value to set.
   */
  public void setSignalType(String value) {
    this.signalType = value;
  }

  /**
   * Gets the value of the 'createDate' field.
   */
  public String getCreateDate() {
    return createDate;
  }

  /**
   * Sets the value of the 'createDate' field.
   * @param value the value to set.
   */
  public void setCreateDate(String value) {
    this.createDate = value;
  }

  /**
   * Gets the value of the 'portfolioID' field.
   */
  public Long getPortfolioID() {
    return portfolioID;
  }

  /**
   * Sets the value of the 'portfolioID' field.
   * @param value the value to set.
   */
  public void setPortfolioID(Long value) {
    this.portfolioID = value;
  }

  /**
   * Gets the value of the 'expirationDate' field.
   */
  public String getExpirationDate() {
    return expirationDate;
  }

  /**
   * Sets the value of the 'expirationDate' field.
   * @param value the value to set.
   */
  public void setExpirationDate(String value) {
    this.expirationDate = value;
  }

  /**
   * Gets the value of the 'applicationID' field.
   */
  public Long getApplicationID() {
    return applicationID;
  }

  /**
   * Sets the value of the 'applicationID' field.
   * @param value the value to set.
   */
  public void setApplicationID(Long value) {
    this.applicationID = value;
  }

  /**
   * Gets the value of the 'priority' field.
   */
  public Integer getPriority() {
    return priority;
  }

  /**
   * Sets the value of the 'priority' field.
   * @param value the value to set.
   */
  public void setPriority(Integer value) {
    this.priority = value;
  }

  /**
   * Gets the value of the 'read' field.
   */
  public Boolean getRead() {
    return read;
  }

  /**
   * Sets the value of the 'read' field.
   * @param value the value to set.
   */
  public void setRead(Boolean value) {
    this.read = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(String value) {
    this.value = value;
  }

  /** Creates a new ApplicationSignalMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new ApplicationSignalMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new ApplicationSignalMessage RecordBuilder by copying an existing ApplicationSignalMessage instance */
  public static Builder newBuilder(ApplicationSignalMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for ApplicationSignalMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApplicationSignalMessage>
    implements org.apache.avro.data.RecordBuilder<ApplicationSignalMessage> {

    private long signalID;
    private String title;
    private String signalType;
    private String createDate;
    private long portfolioID;
    private String expirationDate;
    private long applicationID;
    private int priority;
    private boolean read;
    private String value;

    /** Creates a new Builder */
    private Builder() {
      super(ApplicationSignalMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.signalID)) {
        this.signalID = data().deepCopy(fields()[0].schema(), other.signalID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.signalType)) {
        this.signalType = data().deepCopy(fields()[2].schema(), other.signalType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createDate)) {
        this.createDate = data().deepCopy(fields()[3].schema(), other.createDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.portfolioID)) {
        this.portfolioID = data().deepCopy(fields()[4].schema(), other.portfolioID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[5].schema(), other.expirationDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.applicationID)) {
        this.applicationID = data().deepCopy(fields()[6].schema(), other.applicationID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.priority)) {
        this.priority = data().deepCopy(fields()[7].schema(), other.priority);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.read)) {
        this.read = data().deepCopy(fields()[8].schema(), other.read);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.value)) {
        this.value = data().deepCopy(fields()[9].schema(), other.value);
        fieldSetFlags()[9] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ApplicationSignalMessage instance */
    private Builder(ApplicationSignalMessage other) {
            super(ApplicationSignalMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.signalID)) {
        this.signalID = data().deepCopy(fields()[0].schema(), other.signalID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.signalType)) {
        this.signalType = data().deepCopy(fields()[2].schema(), other.signalType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createDate)) {
        this.createDate = data().deepCopy(fields()[3].schema(), other.createDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.portfolioID)) {
        this.portfolioID = data().deepCopy(fields()[4].schema(), other.portfolioID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[5].schema(), other.expirationDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.applicationID)) {
        this.applicationID = data().deepCopy(fields()[6].schema(), other.applicationID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.priority)) {
        this.priority = data().deepCopy(fields()[7].schema(), other.priority);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.read)) {
        this.read = data().deepCopy(fields()[8].schema(), other.read);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.value)) {
        this.value = data().deepCopy(fields()[9].schema(), other.value);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'signalID' field */
    public Long getSignalID() {
      return signalID;
    }
    
    /** Sets the value of the 'signalID' field */
    public Builder setSignalID(long value) {
      validate(fields()[0], value);
      this.signalID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'signalID' field has been set */
    public boolean hasSignalID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'signalID' field */
    public Builder clearSignalID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'title' field */
    public String getTitle() {
      return title;
    }
    
    /** Sets the value of the 'title' field */
    public Builder setTitle(String value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'title' field has been set */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'title' field */
    public Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'signalType' field */
    public String getSignalType() {
      return signalType;
    }
    
    /** Sets the value of the 'signalType' field */
    public Builder setSignalType(String value) {
      validate(fields()[2], value);
      this.signalType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'signalType' field has been set */
    public boolean hasSignalType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'signalType' field */
    public Builder clearSignalType() {
      signalType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'createDate' field */
    public String getCreateDate() {
      return createDate;
    }
    
    /** Sets the value of the 'createDate' field */
    public Builder setCreateDate(String value) {
      validate(fields()[3], value);
      this.createDate = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'createDate' field has been set */
    public boolean hasCreateDate() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'createDate' field */
    public Builder clearCreateDate() {
      createDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'portfolioID' field */
    public Long getPortfolioID() {
      return portfolioID;
    }
    
    /** Sets the value of the 'portfolioID' field */
    public Builder setPortfolioID(long value) {
      validate(fields()[4], value);
      this.portfolioID = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'portfolioID' field has been set */
    public boolean hasPortfolioID() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'portfolioID' field */
    public Builder clearPortfolioID() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'expirationDate' field */
    public String getExpirationDate() {
      return expirationDate;
    }
    
    /** Sets the value of the 'expirationDate' field */
    public Builder setExpirationDate(String value) {
      validate(fields()[5], value);
      this.expirationDate = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'expirationDate' field has been set */
    public boolean hasExpirationDate() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'expirationDate' field */
    public Builder clearExpirationDate() {
      expirationDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'applicationID' field */
    public Long getApplicationID() {
      return applicationID;
    }
    
    /** Sets the value of the 'applicationID' field */
    public Builder setApplicationID(long value) {
      validate(fields()[6], value);
      this.applicationID = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'applicationID' field has been set */
    public boolean hasApplicationID() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'applicationID' field */
    public Builder clearApplicationID() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'priority' field */
    public Integer getPriority() {
      return priority;
    }
    
    /** Sets the value of the 'priority' field */
    public Builder setPriority(int value) {
      validate(fields()[7], value);
      this.priority = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'priority' field has been set */
    public boolean hasPriority() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'priority' field */
    public Builder clearPriority() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'read' field */
    public Boolean getRead() {
      return read;
    }
    
    /** Sets the value of the 'read' field */
    public Builder setRead(boolean value) {
      validate(fields()[8], value);
      this.read = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'read' field has been set */
    public boolean hasRead() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'read' field */
    public Builder clearRead() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'value' field */
    public String getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public Builder setValue(String value) {
      validate(fields()[9], value);
      this.value = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'value' field */
    public Builder clearValue() {
      value = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public ApplicationSignalMessage build() {
      try {
        ApplicationSignalMessage record = new ApplicationSignalMessage();
        record.signalID = fieldSetFlags()[0] ? this.signalID : (Long) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (String) defaultValue(fields()[1]);
        record.signalType = fieldSetFlags()[2] ? this.signalType : (String) defaultValue(fields()[2]);
        record.createDate = fieldSetFlags()[3] ? this.createDate : (String) defaultValue(fields()[3]);
        record.portfolioID = fieldSetFlags()[4] ? this.portfolioID : (Long) defaultValue(fields()[4]);
        record.expirationDate = fieldSetFlags()[5] ? this.expirationDate : (String) defaultValue(fields()[5]);
        record.applicationID = fieldSetFlags()[6] ? this.applicationID : (Long) defaultValue(fields()[6]);
        record.priority = fieldSetFlags()[7] ? this.priority : (Integer) defaultValue(fields()[7]);
        record.read = fieldSetFlags()[8] ? this.read : (Boolean) defaultValue(fields()[8]);
        record.value = fieldSetFlags()[9] ? this.value : (String) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
