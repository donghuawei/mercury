/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ApplicationPropertyMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApplicationPropertyMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"contentType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"readonly\",\"type\":\"boolean\"},{\"name\":\"applicationID\",\"type\":\"long\"},{\"name\":\"userID\",\"type\":\"long\"},{\"name\":\"portfolioID\",\"type\":\"long\"},{\"name\":\"applicationGroupID\",\"type\":\"long\"},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String key;
  @Deprecated public java.nio.ByteBuffer value;
  @Deprecated public String contentType;
  @Deprecated public boolean readonly;
  @Deprecated public long applicationID;
  @Deprecated public long userID;
  @Deprecated public long portfolioID;
  @Deprecated public long applicationGroupID;
  @Deprecated public String date;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public ApplicationPropertyMessage() {}

  /**
   * All-args constructor.
   */
  public ApplicationPropertyMessage(String key, java.nio.ByteBuffer value, String contentType, Boolean readonly, Long applicationID, Long userID, Long portfolioID, Long applicationGroupID, String date) {
    this.key = key;
    this.value = value;
    this.contentType = contentType;
    this.readonly = readonly;
    this.applicationID = applicationID;
    this.userID = userID;
    this.portfolioID = portfolioID;
    this.applicationGroupID = applicationGroupID;
    this.date = date;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return value;
    case 2: return contentType;
    case 3: return readonly;
    case 4: return applicationID;
    case 5: return userID;
    case 6: return portfolioID;
    case 7: return applicationGroupID;
    case 8: return date;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: key = (String)value$; break;
    case 1: value = (java.nio.ByteBuffer)value$; break;
    case 2: contentType = (String)value$; break;
    case 3: readonly = (Boolean)value$; break;
    case 4: applicationID = (Long)value$; break;
    case 5: userID = (Long)value$; break;
    case 6: portfolioID = (Long)value$; break;
    case 7: applicationGroupID = (Long)value$; break;
    case 8: date = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   */
  public String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public java.nio.ByteBuffer getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.nio.ByteBuffer value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'contentType' field.
   */
  public String getContentType() {
    return contentType;
  }

  /**
   * Sets the value of the 'contentType' field.
   * @param value the value to set.
   */
  public void setContentType(String value) {
    this.contentType = value;
  }

  /**
   * Gets the value of the 'readonly' field.
   */
  public Boolean getReadonly() {
    return readonly;
  }

  /**
   * Sets the value of the 'readonly' field.
   * @param value the value to set.
   */
  public void setReadonly(Boolean value) {
    this.readonly = value;
  }

  /**
   * Gets the value of the 'applicationID' field.
   */
  public Long getApplicationID() {
    return applicationID;
  }

  /**
   * Sets the value of the 'applicationID' field.
   * @param value the value to set.
   */
  public void setApplicationID(Long value) {
    this.applicationID = value;
  }

  /**
   * Gets the value of the 'userID' field.
   */
  public Long getUserID() {
    return userID;
  }

  /**
   * Sets the value of the 'userID' field.
   * @param value the value to set.
   */
  public void setUserID(Long value) {
    this.userID = value;
  }

  /**
   * Gets the value of the 'portfolioID' field.
   */
  public Long getPortfolioID() {
    return portfolioID;
  }

  /**
   * Sets the value of the 'portfolioID' field.
   * @param value the value to set.
   */
  public void setPortfolioID(Long value) {
    this.portfolioID = value;
  }

  /**
   * Gets the value of the 'applicationGroupID' field.
   */
  public Long getApplicationGroupID() {
    return applicationGroupID;
  }

  /**
   * Sets the value of the 'applicationGroupID' field.
   * @param value the value to set.
   */
  public void setApplicationGroupID(Long value) {
    this.applicationGroupID = value;
  }

  /**
   * Gets the value of the 'date' field.
   */
  public String getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(String value) {
    this.date = value;
  }

  /** Creates a new ApplicationPropertyMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new ApplicationPropertyMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new ApplicationPropertyMessage RecordBuilder by copying an existing ApplicationPropertyMessage instance */
  public static Builder newBuilder(ApplicationPropertyMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for ApplicationPropertyMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApplicationPropertyMessage>
    implements org.apache.avro.data.RecordBuilder<ApplicationPropertyMessage> {

    private String key;
    private java.nio.ByteBuffer value;
    private String contentType;
    private boolean readonly;
    private long applicationID;
    private long userID;
    private long portfolioID;
    private long applicationGroupID;
    private String date;

    /** Creates a new Builder */
    private Builder() {
      super(ApplicationPropertyMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.contentType)) {
        this.contentType = data().deepCopy(fields()[2].schema(), other.contentType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.readonly)) {
        this.readonly = data().deepCopy(fields()[3].schema(), other.readonly);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.applicationID)) {
        this.applicationID = data().deepCopy(fields()[4].schema(), other.applicationID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.userID)) {
        this.userID = data().deepCopy(fields()[5].schema(), other.userID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.portfolioID)) {
        this.portfolioID = data().deepCopy(fields()[6].schema(), other.portfolioID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.applicationGroupID)) {
        this.applicationGroupID = data().deepCopy(fields()[7].schema(), other.applicationGroupID);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.date)) {
        this.date = data().deepCopy(fields()[8].schema(), other.date);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ApplicationPropertyMessage instance */
    private Builder(ApplicationPropertyMessage other) {
            super(ApplicationPropertyMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.contentType)) {
        this.contentType = data().deepCopy(fields()[2].schema(), other.contentType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.readonly)) {
        this.readonly = data().deepCopy(fields()[3].schema(), other.readonly);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.applicationID)) {
        this.applicationID = data().deepCopy(fields()[4].schema(), other.applicationID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.userID)) {
        this.userID = data().deepCopy(fields()[5].schema(), other.userID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.portfolioID)) {
        this.portfolioID = data().deepCopy(fields()[6].schema(), other.portfolioID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.applicationGroupID)) {
        this.applicationGroupID = data().deepCopy(fields()[7].schema(), other.applicationGroupID);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.date)) {
        this.date = data().deepCopy(fields()[8].schema(), other.date);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'key' field */
    public String getKey() {
      return key;
    }
    
    /** Sets the value of the 'key' field */
    public Builder setKey(String value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'key' field has been set */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'key' field */
    public Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'value' field */
    public java.nio.ByteBuffer getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public Builder setValue(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'value' field */
    public Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'contentType' field */
    public String getContentType() {
      return contentType;
    }
    
    /** Sets the value of the 'contentType' field */
    public Builder setContentType(String value) {
      validate(fields()[2], value);
      this.contentType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'contentType' field has been set */
    public boolean hasContentType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'contentType' field */
    public Builder clearContentType() {
      contentType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'readonly' field */
    public Boolean getReadonly() {
      return readonly;
    }
    
    /** Sets the value of the 'readonly' field */
    public Builder setReadonly(boolean value) {
      validate(fields()[3], value);
      this.readonly = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'readonly' field has been set */
    public boolean hasReadonly() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'readonly' field */
    public Builder clearReadonly() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'applicationID' field */
    public Long getApplicationID() {
      return applicationID;
    }
    
    /** Sets the value of the 'applicationID' field */
    public Builder setApplicationID(long value) {
      validate(fields()[4], value);
      this.applicationID = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'applicationID' field has been set */
    public boolean hasApplicationID() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'applicationID' field */
    public Builder clearApplicationID() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'userID' field */
    public Long getUserID() {
      return userID;
    }
    
    /** Sets the value of the 'userID' field */
    public Builder setUserID(long value) {
      validate(fields()[5], value);
      this.userID = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'userID' field has been set */
    public boolean hasUserID() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'userID' field */
    public Builder clearUserID() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'portfolioID' field */
    public Long getPortfolioID() {
      return portfolioID;
    }
    
    /** Sets the value of the 'portfolioID' field */
    public Builder setPortfolioID(long value) {
      validate(fields()[6], value);
      this.portfolioID = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'portfolioID' field has been set */
    public boolean hasPortfolioID() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'portfolioID' field */
    public Builder clearPortfolioID() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'applicationGroupID' field */
    public Long getApplicationGroupID() {
      return applicationGroupID;
    }
    
    /** Sets the value of the 'applicationGroupID' field */
    public Builder setApplicationGroupID(long value) {
      validate(fields()[7], value);
      this.applicationGroupID = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'applicationGroupID' field has been set */
    public boolean hasApplicationGroupID() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'applicationGroupID' field */
    public Builder clearApplicationGroupID() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'date' field */
    public String getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public Builder setDate(String value) {
      validate(fields()[8], value);
      this.date = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'date' field */
    public Builder clearDate() {
      date = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public ApplicationPropertyMessage build() {
      try {
        ApplicationPropertyMessage record = new ApplicationPropertyMessage();
        record.key = fieldSetFlags()[0] ? this.key : (String) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.contentType = fieldSetFlags()[2] ? this.contentType : (String) defaultValue(fields()[2]);
        record.readonly = fieldSetFlags()[3] ? this.readonly : (Boolean) defaultValue(fields()[3]);
        record.applicationID = fieldSetFlags()[4] ? this.applicationID : (Long) defaultValue(fields()[4]);
        record.userID = fieldSetFlags()[5] ? this.userID : (Long) defaultValue(fields()[5]);
        record.portfolioID = fieldSetFlags()[6] ? this.portfolioID : (Long) defaultValue(fields()[6]);
        record.applicationGroupID = fieldSetFlags()[7] ? this.applicationGroupID : (Long) defaultValue(fields()[7]);
        record.date = fieldSetFlags()[8] ? this.date : (String) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
