/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CashMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CashMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"accountID\",\"type\":\"long\"},{\"name\":\"createDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"qty\",\"type\":\"double\"},{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"preBalance\",\"type\":\"double\"},{\"name\":\"deposit\",\"type\":\"double\"},{\"name\":\"withdraw\",\"type\":\"double\"},{\"name\":\"frozenMargin\",\"type\":\"double\"},{\"name\":\"frozenCash\",\"type\":\"double\"},{\"name\":\"frozenCommission\",\"type\":\"double\"},{\"name\":\"currMargin\",\"type\":\"double\"},{\"name\":\"commission\",\"type\":\"double\"},{\"name\":\"closeProfit\",\"type\":\"double\"},{\"name\":\"positionProfit\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long accountID;
  @Deprecated public String createDate;
  @Deprecated public double qty;
  @Deprecated public double value;
  @Deprecated public double preBalance;
  @Deprecated public double deposit;
  @Deprecated public double withdraw;
  @Deprecated public double frozenMargin;
  @Deprecated public double frozenCash;
  @Deprecated public double frozenCommission;
  @Deprecated public double currMargin;
  @Deprecated public double commission;
  @Deprecated public double closeProfit;
  @Deprecated public double positionProfit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public CashMessage() {}

  /**
   * All-args constructor.
   */
  public CashMessage(Long accountID, String createDate, Double qty, Double value, Double preBalance, Double deposit, Double withdraw, Double frozenMargin, Double frozenCash, Double frozenCommission, Double currMargin, Double commission, Double closeProfit, Double positionProfit) {
    this.accountID = accountID;
    this.createDate = createDate;
    this.qty = qty;
    this.value = value;
    this.preBalance = preBalance;
    this.deposit = deposit;
    this.withdraw = withdraw;
    this.frozenMargin = frozenMargin;
    this.frozenCash = frozenCash;
    this.frozenCommission = frozenCommission;
    this.currMargin = currMargin;
    this.commission = commission;
    this.closeProfit = closeProfit;
    this.positionProfit = positionProfit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return accountID;
    case 1: return createDate;
    case 2: return qty;
    case 3: return value;
    case 4: return preBalance;
    case 5: return deposit;
    case 6: return withdraw;
    case 7: return frozenMargin;
    case 8: return frozenCash;
    case 9: return frozenCommission;
    case 10: return currMargin;
    case 11: return commission;
    case 12: return closeProfit;
    case 13: return positionProfit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: accountID = (Long)value$; break;
    case 1: createDate = (String)value$; break;
    case 2: qty = (Double)value$; break;
    case 3: value = (Double)value$; break;
    case 4: preBalance = (Double)value$; break;
    case 5: deposit = (Double)value$; break;
    case 6: withdraw = (Double)value$; break;
    case 7: frozenMargin = (Double)value$; break;
    case 8: frozenCash = (Double)value$; break;
    case 9: frozenCommission = (Double)value$; break;
    case 10: currMargin = (Double)value$; break;
    case 11: commission = (Double)value$; break;
    case 12: closeProfit = (Double)value$; break;
    case 13: positionProfit = (Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accountID' field.
   */
  public Long getAccountID() {
    return accountID;
  }

  /**
   * Sets the value of the 'accountID' field.
   * @param value the value to set.
   */
  public void setAccountID(Long value) {
    this.accountID = value;
  }

  /**
   * Gets the value of the 'createDate' field.
   */
  public String getCreateDate() {
    return createDate;
  }

  /**
   * Sets the value of the 'createDate' field.
   * @param value the value to set.
   */
  public void setCreateDate(String value) {
    this.createDate = value;
  }

  /**
   * Gets the value of the 'qty' field.
   */
  public Double getQty() {
    return qty;
  }

  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(Double value) {
    this.qty = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public Double getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(Double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'preBalance' field.
   */
  public Double getPreBalance() {
    return preBalance;
  }

  /**
   * Sets the value of the 'preBalance' field.
   * @param value the value to set.
   */
  public void setPreBalance(Double value) {
    this.preBalance = value;
  }

  /**
   * Gets the value of the 'deposit' field.
   */
  public Double getDeposit() {
    return deposit;
  }

  /**
   * Sets the value of the 'deposit' field.
   * @param value the value to set.
   */
  public void setDeposit(Double value) {
    this.deposit = value;
  }

  /**
   * Gets the value of the 'withdraw' field.
   */
  public Double getWithdraw() {
    return withdraw;
  }

  /**
   * Sets the value of the 'withdraw' field.
   * @param value the value to set.
   */
  public void setWithdraw(Double value) {
    this.withdraw = value;
  }

  /**
   * Gets the value of the 'frozenMargin' field.
   */
  public Double getFrozenMargin() {
    return frozenMargin;
  }

  /**
   * Sets the value of the 'frozenMargin' field.
   * @param value the value to set.
   */
  public void setFrozenMargin(Double value) {
    this.frozenMargin = value;
  }

  /**
   * Gets the value of the 'frozenCash' field.
   */
  public Double getFrozenCash() {
    return frozenCash;
  }

  /**
   * Sets the value of the 'frozenCash' field.
   * @param value the value to set.
   */
  public void setFrozenCash(Double value) {
    this.frozenCash = value;
  }

  /**
   * Gets the value of the 'frozenCommission' field.
   */
  public Double getFrozenCommission() {
    return frozenCommission;
  }

  /**
   * Sets the value of the 'frozenCommission' field.
   * @param value the value to set.
   */
  public void setFrozenCommission(Double value) {
    this.frozenCommission = value;
  }

  /**
   * Gets the value of the 'currMargin' field.
   */
  public Double getCurrMargin() {
    return currMargin;
  }

  /**
   * Sets the value of the 'currMargin' field.
   * @param value the value to set.
   */
  public void setCurrMargin(Double value) {
    this.currMargin = value;
  }

  /**
   * Gets the value of the 'commission' field.
   */
  public Double getCommission() {
    return commission;
  }

  /**
   * Sets the value of the 'commission' field.
   * @param value the value to set.
   */
  public void setCommission(Double value) {
    this.commission = value;
  }

  /**
   * Gets the value of the 'closeProfit' field.
   */
  public Double getCloseProfit() {
    return closeProfit;
  }

  /**
   * Sets the value of the 'closeProfit' field.
   * @param value the value to set.
   */
  public void setCloseProfit(Double value) {
    this.closeProfit = value;
  }

  /**
   * Gets the value of the 'positionProfit' field.
   */
  public Double getPositionProfit() {
    return positionProfit;
  }

  /**
   * Sets the value of the 'positionProfit' field.
   * @param value the value to set.
   */
  public void setPositionProfit(Double value) {
    this.positionProfit = value;
  }

  /** Creates a new CashMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new CashMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new CashMessage RecordBuilder by copying an existing CashMessage instance */
  public static Builder newBuilder(CashMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for CashMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CashMessage>
    implements org.apache.avro.data.RecordBuilder<CashMessage> {

    private long accountID;
    private String createDate;
    private double qty;
    private double value;
    private double preBalance;
    private double deposit;
    private double withdraw;
    private double frozenMargin;
    private double frozenCash;
    private double frozenCommission;
    private double currMargin;
    private double commission;
    private double closeProfit;
    private double positionProfit;

    /** Creates a new Builder */
    private Builder() {
      super(CashMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountID)) {
        this.accountID = data().deepCopy(fields()[0].schema(), other.accountID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createDate)) {
        this.createDate = data().deepCopy(fields()[1].schema(), other.createDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qty)) {
        this.qty = data().deepCopy(fields()[2].schema(), other.qty);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.preBalance)) {
        this.preBalance = data().deepCopy(fields()[4].schema(), other.preBalance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deposit)) {
        this.deposit = data().deepCopy(fields()[5].schema(), other.deposit);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.withdraw)) {
        this.withdraw = data().deepCopy(fields()[6].schema(), other.withdraw);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.frozenMargin)) {
        this.frozenMargin = data().deepCopy(fields()[7].schema(), other.frozenMargin);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.frozenCash)) {
        this.frozenCash = data().deepCopy(fields()[8].schema(), other.frozenCash);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.frozenCommission)) {
        this.frozenCommission = data().deepCopy(fields()[9].schema(), other.frozenCommission);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.currMargin)) {
        this.currMargin = data().deepCopy(fields()[10].schema(), other.currMargin);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.commission)) {
        this.commission = data().deepCopy(fields()[11].schema(), other.commission);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.closeProfit)) {
        this.closeProfit = data().deepCopy(fields()[12].schema(), other.closeProfit);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.positionProfit)) {
        this.positionProfit = data().deepCopy(fields()[13].schema(), other.positionProfit);
        fieldSetFlags()[13] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CashMessage instance */
    private Builder(CashMessage other) {
            super(CashMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.accountID)) {
        this.accountID = data().deepCopy(fields()[0].schema(), other.accountID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createDate)) {
        this.createDate = data().deepCopy(fields()[1].schema(), other.createDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qty)) {
        this.qty = data().deepCopy(fields()[2].schema(), other.qty);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.preBalance)) {
        this.preBalance = data().deepCopy(fields()[4].schema(), other.preBalance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deposit)) {
        this.deposit = data().deepCopy(fields()[5].schema(), other.deposit);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.withdraw)) {
        this.withdraw = data().deepCopy(fields()[6].schema(), other.withdraw);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.frozenMargin)) {
        this.frozenMargin = data().deepCopy(fields()[7].schema(), other.frozenMargin);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.frozenCash)) {
        this.frozenCash = data().deepCopy(fields()[8].schema(), other.frozenCash);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.frozenCommission)) {
        this.frozenCommission = data().deepCopy(fields()[9].schema(), other.frozenCommission);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.currMargin)) {
        this.currMargin = data().deepCopy(fields()[10].schema(), other.currMargin);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.commission)) {
        this.commission = data().deepCopy(fields()[11].schema(), other.commission);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.closeProfit)) {
        this.closeProfit = data().deepCopy(fields()[12].schema(), other.closeProfit);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.positionProfit)) {
        this.positionProfit = data().deepCopy(fields()[13].schema(), other.positionProfit);
        fieldSetFlags()[13] = true;
      }
    }

    /** Gets the value of the 'accountID' field */
    public Long getAccountID() {
      return accountID;
    }
    
    /** Sets the value of the 'accountID' field */
    public Builder setAccountID(long value) {
      validate(fields()[0], value);
      this.accountID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'accountID' field has been set */
    public boolean hasAccountID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'accountID' field */
    public Builder clearAccountID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'createDate' field */
    public String getCreateDate() {
      return createDate;
    }
    
    /** Sets the value of the 'createDate' field */
    public Builder setCreateDate(String value) {
      validate(fields()[1], value);
      this.createDate = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'createDate' field has been set */
    public boolean hasCreateDate() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'createDate' field */
    public Builder clearCreateDate() {
      createDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'qty' field */
    public Double getQty() {
      return qty;
    }
    
    /** Sets the value of the 'qty' field */
    public Builder setQty(double value) {
      validate(fields()[2], value);
      this.qty = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'qty' field has been set */
    public boolean hasQty() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'qty' field */
    public Builder clearQty() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'value' field */
    public Double getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public Builder setValue(double value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'value' field */
    public Builder clearValue() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'preBalance' field */
    public Double getPreBalance() {
      return preBalance;
    }
    
    /** Sets the value of the 'preBalance' field */
    public Builder setPreBalance(double value) {
      validate(fields()[4], value);
      this.preBalance = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'preBalance' field has been set */
    public boolean hasPreBalance() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'preBalance' field */
    public Builder clearPreBalance() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'deposit' field */
    public Double getDeposit() {
      return deposit;
    }
    
    /** Sets the value of the 'deposit' field */
    public Builder setDeposit(double value) {
      validate(fields()[5], value);
      this.deposit = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'deposit' field has been set */
    public boolean hasDeposit() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'deposit' field */
    public Builder clearDeposit() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'withdraw' field */
    public Double getWithdraw() {
      return withdraw;
    }
    
    /** Sets the value of the 'withdraw' field */
    public Builder setWithdraw(double value) {
      validate(fields()[6], value);
      this.withdraw = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'withdraw' field has been set */
    public boolean hasWithdraw() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'withdraw' field */
    public Builder clearWithdraw() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'frozenMargin' field */
    public Double getFrozenMargin() {
      return frozenMargin;
    }
    
    /** Sets the value of the 'frozenMargin' field */
    public Builder setFrozenMargin(double value) {
      validate(fields()[7], value);
      this.frozenMargin = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'frozenMargin' field has been set */
    public boolean hasFrozenMargin() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'frozenMargin' field */
    public Builder clearFrozenMargin() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'frozenCash' field */
    public Double getFrozenCash() {
      return frozenCash;
    }
    
    /** Sets the value of the 'frozenCash' field */
    public Builder setFrozenCash(double value) {
      validate(fields()[8], value);
      this.frozenCash = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'frozenCash' field has been set */
    public boolean hasFrozenCash() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'frozenCash' field */
    public Builder clearFrozenCash() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'frozenCommission' field */
    public Double getFrozenCommission() {
      return frozenCommission;
    }
    
    /** Sets the value of the 'frozenCommission' field */
    public Builder setFrozenCommission(double value) {
      validate(fields()[9], value);
      this.frozenCommission = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'frozenCommission' field has been set */
    public boolean hasFrozenCommission() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'frozenCommission' field */
    public Builder clearFrozenCommission() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'currMargin' field */
    public Double getCurrMargin() {
      return currMargin;
    }
    
    /** Sets the value of the 'currMargin' field */
    public Builder setCurrMargin(double value) {
      validate(fields()[10], value);
      this.currMargin = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'currMargin' field has been set */
    public boolean hasCurrMargin() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'currMargin' field */
    public Builder clearCurrMargin() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'commission' field */
    public Double getCommission() {
      return commission;
    }
    
    /** Sets the value of the 'commission' field */
    public Builder setCommission(double value) {
      validate(fields()[11], value);
      this.commission = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'commission' field has been set */
    public boolean hasCommission() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'commission' field */
    public Builder clearCommission() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'closeProfit' field */
    public Double getCloseProfit() {
      return closeProfit;
    }
    
    /** Sets the value of the 'closeProfit' field */
    public Builder setCloseProfit(double value) {
      validate(fields()[12], value);
      this.closeProfit = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'closeProfit' field has been set */
    public boolean hasCloseProfit() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'closeProfit' field */
    public Builder clearCloseProfit() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'positionProfit' field */
    public Double getPositionProfit() {
      return positionProfit;
    }
    
    /** Sets the value of the 'positionProfit' field */
    public Builder setPositionProfit(double value) {
      validate(fields()[13], value);
      this.positionProfit = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'positionProfit' field has been set */
    public boolean hasPositionProfit() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'positionProfit' field */
    public Builder clearPositionProfit() {
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    public CashMessage build() {
      try {
        CashMessage record = new CashMessage();
        record.accountID = fieldSetFlags()[0] ? this.accountID : (Long) defaultValue(fields()[0]);
        record.createDate = fieldSetFlags()[1] ? this.createDate : (String) defaultValue(fields()[1]);
        record.qty = fieldSetFlags()[2] ? this.qty : (Double) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (Double) defaultValue(fields()[3]);
        record.preBalance = fieldSetFlags()[4] ? this.preBalance : (Double) defaultValue(fields()[4]);
        record.deposit = fieldSetFlags()[5] ? this.deposit : (Double) defaultValue(fields()[5]);
        record.withdraw = fieldSetFlags()[6] ? this.withdraw : (Double) defaultValue(fields()[6]);
        record.frozenMargin = fieldSetFlags()[7] ? this.frozenMargin : (Double) defaultValue(fields()[7]);
        record.frozenCash = fieldSetFlags()[8] ? this.frozenCash : (Double) defaultValue(fields()[8]);
        record.frozenCommission = fieldSetFlags()[9] ? this.frozenCommission : (Double) defaultValue(fields()[9]);
        record.currMargin = fieldSetFlags()[10] ? this.currMargin : (Double) defaultValue(fields()[10]);
        record.commission = fieldSetFlags()[11] ? this.commission : (Double) defaultValue(fields()[11]);
        record.closeProfit = fieldSetFlags()[12] ? this.closeProfit : (Double) defaultValue(fields()[12]);
        record.positionProfit = fieldSetFlags()[13] ? this.positionProfit : (Double) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
