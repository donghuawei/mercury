/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class InstrumentDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InstrumentDetails\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"exchangeID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instrumentName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"unitSize\",\"type\":\"int\"},{\"name\":\"priceTick\",\"type\":\"double\"},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"openDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"expireDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String exchangeID;
  @Deprecated public String instrumentName;
  @Deprecated public int unitSize;
  @Deprecated public double priceTick;
  @Deprecated public String symbol;
  @Deprecated public String openDate;
  @Deprecated public String expireDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public InstrumentDetails() {}

  /**
   * All-args constructor.
   */
  public InstrumentDetails(String exchangeID, String instrumentName, Integer unitSize, Double priceTick, String symbol, String openDate, String expireDate) {
    this.exchangeID = exchangeID;
    this.instrumentName = instrumentName;
    this.unitSize = unitSize;
    this.priceTick = priceTick;
    this.symbol = symbol;
    this.openDate = openDate;
    this.expireDate = expireDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return exchangeID;
    case 1: return instrumentName;
    case 2: return unitSize;
    case 3: return priceTick;
    case 4: return symbol;
    case 5: return openDate;
    case 6: return expireDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: exchangeID = (String)value$; break;
    case 1: instrumentName = (String)value$; break;
    case 2: unitSize = (Integer)value$; break;
    case 3: priceTick = (Double)value$; break;
    case 4: symbol = (String)value$; break;
    case 5: openDate = (String)value$; break;
    case 6: expireDate = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'exchangeID' field.
   */
  public String getExchangeID() {
    return exchangeID;
  }

  /**
   * Sets the value of the 'exchangeID' field.
   * @param value the value to set.
   */
  public void setExchangeID(String value) {
    this.exchangeID = value;
  }

  /**
   * Gets the value of the 'instrumentName' field.
   */
  public String getInstrumentName() {
    return instrumentName;
  }

  /**
   * Sets the value of the 'instrumentName' field.
   * @param value the value to set.
   */
  public void setInstrumentName(String value) {
    this.instrumentName = value;
  }

  /**
   * Gets the value of the 'unitSize' field.
   */
  public Integer getUnitSize() {
    return unitSize;
  }

  /**
   * Sets the value of the 'unitSize' field.
   * @param value the value to set.
   */
  public void setUnitSize(Integer value) {
    this.unitSize = value;
  }

  /**
   * Gets the value of the 'priceTick' field.
   */
  public Double getPriceTick() {
    return priceTick;
  }

  /**
   * Sets the value of the 'priceTick' field.
   * @param value the value to set.
   */
  public void setPriceTick(Double value) {
    this.priceTick = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   */
  public String getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'openDate' field.
   */
  public String getOpenDate() {
    return openDate;
  }

  /**
   * Sets the value of the 'openDate' field.
   * @param value the value to set.
   */
  public void setOpenDate(String value) {
    this.openDate = value;
  }

  /**
   * Gets the value of the 'expireDate' field.
   */
  public String getExpireDate() {
    return expireDate;
  }

  /**
   * Sets the value of the 'expireDate' field.
   * @param value the value to set.
   */
  public void setExpireDate(String value) {
    this.expireDate = value;
  }

  /** Creates a new InstrumentDetails RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new InstrumentDetails RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new InstrumentDetails RecordBuilder by copying an existing InstrumentDetails instance */
  public static Builder newBuilder(InstrumentDetails other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for InstrumentDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InstrumentDetails>
    implements org.apache.avro.data.RecordBuilder<InstrumentDetails> {

    private String exchangeID;
    private String instrumentName;
    private int unitSize;
    private double priceTick;
    private String symbol;
    private String openDate;
    private String expireDate;

    /** Creates a new Builder */
    private Builder() {
      super(InstrumentDetails.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.exchangeID)) {
        this.exchangeID = data().deepCopy(fields()[0].schema(), other.exchangeID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentName)) {
        this.instrumentName = data().deepCopy(fields()[1].schema(), other.instrumentName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unitSize)) {
        this.unitSize = data().deepCopy(fields()[2].schema(), other.unitSize);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.priceTick)) {
        this.priceTick = data().deepCopy(fields()[3].schema(), other.priceTick);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.symbol)) {
        this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.openDate)) {
        this.openDate = data().deepCopy(fields()[5].schema(), other.openDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.expireDate)) {
        this.expireDate = data().deepCopy(fields()[6].schema(), other.expireDate);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing InstrumentDetails instance */
    private Builder(InstrumentDetails other) {
            super(InstrumentDetails.SCHEMA$);
      if (isValidValue(fields()[0], other.exchangeID)) {
        this.exchangeID = data().deepCopy(fields()[0].schema(), other.exchangeID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentName)) {
        this.instrumentName = data().deepCopy(fields()[1].schema(), other.instrumentName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unitSize)) {
        this.unitSize = data().deepCopy(fields()[2].schema(), other.unitSize);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.priceTick)) {
        this.priceTick = data().deepCopy(fields()[3].schema(), other.priceTick);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.symbol)) {
        this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.openDate)) {
        this.openDate = data().deepCopy(fields()[5].schema(), other.openDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.expireDate)) {
        this.expireDate = data().deepCopy(fields()[6].schema(), other.expireDate);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'exchangeID' field */
    public String getExchangeID() {
      return exchangeID;
    }
    
    /** Sets the value of the 'exchangeID' field */
    public Builder setExchangeID(String value) {
      validate(fields()[0], value);
      this.exchangeID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'exchangeID' field has been set */
    public boolean hasExchangeID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'exchangeID' field */
    public Builder clearExchangeID() {
      exchangeID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'instrumentName' field */
    public String getInstrumentName() {
      return instrumentName;
    }
    
    /** Sets the value of the 'instrumentName' field */
    public Builder setInstrumentName(String value) {
      validate(fields()[1], value);
      this.instrumentName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'instrumentName' field has been set */
    public boolean hasInstrumentName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'instrumentName' field */
    public Builder clearInstrumentName() {
      instrumentName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'unitSize' field */
    public Integer getUnitSize() {
      return unitSize;
    }
    
    /** Sets the value of the 'unitSize' field */
    public Builder setUnitSize(int value) {
      validate(fields()[2], value);
      this.unitSize = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'unitSize' field has been set */
    public boolean hasUnitSize() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'unitSize' field */
    public Builder clearUnitSize() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'priceTick' field */
    public Double getPriceTick() {
      return priceTick;
    }
    
    /** Sets the value of the 'priceTick' field */
    public Builder setPriceTick(double value) {
      validate(fields()[3], value);
      this.priceTick = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'priceTick' field has been set */
    public boolean hasPriceTick() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'priceTick' field */
    public Builder clearPriceTick() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'symbol' field */
    public String getSymbol() {
      return symbol;
    }
    
    /** Sets the value of the 'symbol' field */
    public Builder setSymbol(String value) {
      validate(fields()[4], value);
      this.symbol = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'symbol' field has been set */
    public boolean hasSymbol() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'symbol' field */
    public Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'openDate' field */
    public String getOpenDate() {
      return openDate;
    }
    
    /** Sets the value of the 'openDate' field */
    public Builder setOpenDate(String value) {
      validate(fields()[5], value);
      this.openDate = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'openDate' field has been set */
    public boolean hasOpenDate() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'openDate' field */
    public Builder clearOpenDate() {
      openDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'expireDate' field */
    public String getExpireDate() {
      return expireDate;
    }
    
    /** Sets the value of the 'expireDate' field */
    public Builder setExpireDate(String value) {
      validate(fields()[6], value);
      this.expireDate = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'expireDate' field has been set */
    public boolean hasExpireDate() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'expireDate' field */
    public Builder clearExpireDate() {
      expireDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public InstrumentDetails build() {
      try {
        InstrumentDetails record = new InstrumentDetails();
        record.exchangeID = fieldSetFlags()[0] ? this.exchangeID : (String) defaultValue(fields()[0]);
        record.instrumentName = fieldSetFlags()[1] ? this.instrumentName : (String) defaultValue(fields()[1]);
        record.unitSize = fieldSetFlags()[2] ? this.unitSize : (Integer) defaultValue(fields()[2]);
        record.priceTick = fieldSetFlags()[3] ? this.priceTick : (Double) defaultValue(fields()[3]);
        record.symbol = fieldSetFlags()[4] ? this.symbol : (String) defaultValue(fields()[4]);
        record.openDate = fieldSetFlags()[5] ? this.openDate : (String) defaultValue(fields()[5]);
        record.expireDate = fieldSetFlags()[6] ? this.expireDate : (String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
