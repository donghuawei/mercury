/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class QueryOrderStatusMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"QueryOrderStatusMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"orderID\",\"type\":\"long\"},{\"name\":\"brokerID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountID\",\"type\":\"long\"},{\"name\":\"accountAuthID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountPassword\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"exchangeID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"OrderDirection1\",\"symbols\":[\"order_direction1_long\",\"order_direction1_short\"]}},{\"name\":\"flags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"expirationDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long orderID;
  @Deprecated public String brokerID;
  @Deprecated public long accountID;
  @Deprecated public String accountAuthID;
  @Deprecated public String accountPassword;
  @Deprecated public String exchangeID;
  @Deprecated public String symbol;
  @Deprecated public OrderDirection1 direction;
  @Deprecated public java.util.List<String> flags;
  @Deprecated public double price;
  @Deprecated public int qty;
  @Deprecated public String expirationDate;
  @Deprecated public String createDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public QueryOrderStatusMessage() {}

  /**
   * All-args constructor.
   */
  public QueryOrderStatusMessage(Long orderID, String brokerID, Long accountID, String accountAuthID, String accountPassword, String exchangeID, String symbol, OrderDirection1 direction, java.util.List<String> flags, Double price, Integer qty, String expirationDate, String createDate) {
    this.orderID = orderID;
    this.brokerID = brokerID;
    this.accountID = accountID;
    this.accountAuthID = accountAuthID;
    this.accountPassword = accountPassword;
    this.exchangeID = exchangeID;
    this.symbol = symbol;
    this.direction = direction;
    this.flags = flags;
    this.price = price;
    this.qty = qty;
    this.expirationDate = expirationDate;
    this.createDate = createDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return orderID;
    case 1: return brokerID;
    case 2: return accountID;
    case 3: return accountAuthID;
    case 4: return accountPassword;
    case 5: return exchangeID;
    case 6: return symbol;
    case 7: return direction;
    case 8: return flags;
    case 9: return price;
    case 10: return qty;
    case 11: return expirationDate;
    case 12: return createDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: orderID = (Long)value$; break;
    case 1: brokerID = (String)value$; break;
    case 2: accountID = (Long)value$; break;
    case 3: accountAuthID = (String)value$; break;
    case 4: accountPassword = (String)value$; break;
    case 5: exchangeID = (String)value$; break;
    case 6: symbol = (String)value$; break;
    case 7: direction = (OrderDirection1)value$; break;
    case 8: flags = (java.util.List<String>)value$; break;
    case 9: price = (Double)value$; break;
    case 10: qty = (Integer)value$; break;
    case 11: expirationDate = (String)value$; break;
    case 12: createDate = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderID' field.
   */
  public Long getOrderID() {
    return orderID;
  }

  /**
   * Sets the value of the 'orderID' field.
   * @param value the value to set.
   */
  public void setOrderID(Long value) {
    this.orderID = value;
  }

  /**
   * Gets the value of the 'brokerID' field.
   */
  public String getBrokerID() {
    return brokerID;
  }

  /**
   * Sets the value of the 'brokerID' field.
   * @param value the value to set.
   */
  public void setBrokerID(String value) {
    this.brokerID = value;
  }

  /**
   * Gets the value of the 'accountID' field.
   */
  public Long getAccountID() {
    return accountID;
  }

  /**
   * Sets the value of the 'accountID' field.
   * @param value the value to set.
   */
  public void setAccountID(Long value) {
    this.accountID = value;
  }

  /**
   * Gets the value of the 'accountAuthID' field.
   */
  public String getAccountAuthID() {
    return accountAuthID;
  }

  /**
   * Sets the value of the 'accountAuthID' field.
   * @param value the value to set.
   */
  public void setAccountAuthID(String value) {
    this.accountAuthID = value;
  }

  /**
   * Gets the value of the 'accountPassword' field.
   */
  public String getAccountPassword() {
    return accountPassword;
  }

  /**
   * Sets the value of the 'accountPassword' field.
   * @param value the value to set.
   */
  public void setAccountPassword(String value) {
    this.accountPassword = value;
  }

  /**
   * Gets the value of the 'exchangeID' field.
   */
  public String getExchangeID() {
    return exchangeID;
  }

  /**
   * Sets the value of the 'exchangeID' field.
   * @param value the value to set.
   */
  public void setExchangeID(String value) {
    this.exchangeID = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   */
  public String getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'direction' field.
   */
  public OrderDirection1 getDirection() {
    return direction;
  }

  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(OrderDirection1 value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'flags' field.
   */
  public java.util.List<String> getFlags() {
    return flags;
  }

  /**
   * Sets the value of the 'flags' field.
   * @param value the value to set.
   */
  public void setFlags(java.util.List<String> value) {
    this.flags = value;
  }

  /**
   * Gets the value of the 'price' field.
   */
  public Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'qty' field.
   */
  public Integer getQty() {
    return qty;
  }

  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(Integer value) {
    this.qty = value;
  }

  /**
   * Gets the value of the 'expirationDate' field.
   */
  public String getExpirationDate() {
    return expirationDate;
  }

  /**
   * Sets the value of the 'expirationDate' field.
   * @param value the value to set.
   */
  public void setExpirationDate(String value) {
    this.expirationDate = value;
  }

  /**
   * Gets the value of the 'createDate' field.
   */
  public String getCreateDate() {
    return createDate;
  }

  /**
   * Sets the value of the 'createDate' field.
   * @param value the value to set.
   */
  public void setCreateDate(String value) {
    this.createDate = value;
  }

  /** Creates a new QueryOrderStatusMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new QueryOrderStatusMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new QueryOrderStatusMessage RecordBuilder by copying an existing QueryOrderStatusMessage instance */
  public static Builder newBuilder(QueryOrderStatusMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for QueryOrderStatusMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<QueryOrderStatusMessage>
    implements org.apache.avro.data.RecordBuilder<QueryOrderStatusMessage> {

    private long orderID;
    private String brokerID;
    private long accountID;
    private String accountAuthID;
    private String accountPassword;
    private String exchangeID;
    private String symbol;
    private OrderDirection1 direction;
    private java.util.List<String> flags;
    private double price;
    private int qty;
    private String expirationDate;
    private String createDate;

    /** Creates a new Builder */
    private Builder() {
      super(QueryOrderStatusMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderID)) {
        this.orderID = data().deepCopy(fields()[0].schema(), other.orderID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brokerID)) {
        this.brokerID = data().deepCopy(fields()[1].schema(), other.brokerID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountID)) {
        this.accountID = data().deepCopy(fields()[2].schema(), other.accountID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountAuthID)) {
        this.accountAuthID = data().deepCopy(fields()[3].schema(), other.accountAuthID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.accountPassword)) {
        this.accountPassword = data().deepCopy(fields()[4].schema(), other.accountPassword);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.exchangeID)) {
        this.exchangeID = data().deepCopy(fields()[5].schema(), other.exchangeID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.symbol)) {
        this.symbol = data().deepCopy(fields()[6].schema(), other.symbol);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.direction)) {
        this.direction = data().deepCopy(fields()[7].schema(), other.direction);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.flags)) {
        this.flags = data().deepCopy(fields()[8].schema(), other.flags);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.price)) {
        this.price = data().deepCopy(fields()[9].schema(), other.price);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.qty)) {
        this.qty = data().deepCopy(fields()[10].schema(), other.qty);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[11].schema(), other.expirationDate);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.createDate)) {
        this.createDate = data().deepCopy(fields()[12].schema(), other.createDate);
        fieldSetFlags()[12] = true;
      }
    }
    
    /** Creates a Builder by copying an existing QueryOrderStatusMessage instance */
    private Builder(QueryOrderStatusMessage other) {
            super(QueryOrderStatusMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.orderID)) {
        this.orderID = data().deepCopy(fields()[0].schema(), other.orderID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brokerID)) {
        this.brokerID = data().deepCopy(fields()[1].schema(), other.brokerID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountID)) {
        this.accountID = data().deepCopy(fields()[2].schema(), other.accountID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountAuthID)) {
        this.accountAuthID = data().deepCopy(fields()[3].schema(), other.accountAuthID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.accountPassword)) {
        this.accountPassword = data().deepCopy(fields()[4].schema(), other.accountPassword);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.exchangeID)) {
        this.exchangeID = data().deepCopy(fields()[5].schema(), other.exchangeID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.symbol)) {
        this.symbol = data().deepCopy(fields()[6].schema(), other.symbol);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.direction)) {
        this.direction = data().deepCopy(fields()[7].schema(), other.direction);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.flags)) {
        this.flags = data().deepCopy(fields()[8].schema(), other.flags);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.price)) {
        this.price = data().deepCopy(fields()[9].schema(), other.price);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.qty)) {
        this.qty = data().deepCopy(fields()[10].schema(), other.qty);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[11].schema(), other.expirationDate);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.createDate)) {
        this.createDate = data().deepCopy(fields()[12].schema(), other.createDate);
        fieldSetFlags()[12] = true;
      }
    }

    /** Gets the value of the 'orderID' field */
    public Long getOrderID() {
      return orderID;
    }
    
    /** Sets the value of the 'orderID' field */
    public Builder setOrderID(long value) {
      validate(fields()[0], value);
      this.orderID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'orderID' field has been set */
    public boolean hasOrderID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'orderID' field */
    public Builder clearOrderID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'brokerID' field */
    public String getBrokerID() {
      return brokerID;
    }
    
    /** Sets the value of the 'brokerID' field */
    public Builder setBrokerID(String value) {
      validate(fields()[1], value);
      this.brokerID = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'brokerID' field has been set */
    public boolean hasBrokerID() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'brokerID' field */
    public Builder clearBrokerID() {
      brokerID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'accountID' field */
    public Long getAccountID() {
      return accountID;
    }
    
    /** Sets the value of the 'accountID' field */
    public Builder setAccountID(long value) {
      validate(fields()[2], value);
      this.accountID = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'accountID' field has been set */
    public boolean hasAccountID() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'accountID' field */
    public Builder clearAccountID() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'accountAuthID' field */
    public String getAccountAuthID() {
      return accountAuthID;
    }
    
    /** Sets the value of the 'accountAuthID' field */
    public Builder setAccountAuthID(String value) {
      validate(fields()[3], value);
      this.accountAuthID = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'accountAuthID' field has been set */
    public boolean hasAccountAuthID() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'accountAuthID' field */
    public Builder clearAccountAuthID() {
      accountAuthID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'accountPassword' field */
    public String getAccountPassword() {
      return accountPassword;
    }
    
    /** Sets the value of the 'accountPassword' field */
    public Builder setAccountPassword(String value) {
      validate(fields()[4], value);
      this.accountPassword = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'accountPassword' field has been set */
    public boolean hasAccountPassword() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'accountPassword' field */
    public Builder clearAccountPassword() {
      accountPassword = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'exchangeID' field */
    public String getExchangeID() {
      return exchangeID;
    }
    
    /** Sets the value of the 'exchangeID' field */
    public Builder setExchangeID(String value) {
      validate(fields()[5], value);
      this.exchangeID = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'exchangeID' field has been set */
    public boolean hasExchangeID() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'exchangeID' field */
    public Builder clearExchangeID() {
      exchangeID = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'symbol' field */
    public String getSymbol() {
      return symbol;
    }
    
    /** Sets the value of the 'symbol' field */
    public Builder setSymbol(String value) {
      validate(fields()[6], value);
      this.symbol = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'symbol' field has been set */
    public boolean hasSymbol() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'symbol' field */
    public Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'direction' field */
    public OrderDirection1 getDirection() {
      return direction;
    }
    
    /** Sets the value of the 'direction' field */
    public Builder setDirection(OrderDirection1 value) {
      validate(fields()[7], value);
      this.direction = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'direction' field has been set */
    public boolean hasDirection() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'direction' field */
    public Builder clearDirection() {
      direction = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'flags' field */
    public java.util.List<String> getFlags() {
      return flags;
    }
    
    /** Sets the value of the 'flags' field */
    public Builder setFlags(java.util.List<String> value) {
      validate(fields()[8], value);
      this.flags = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'flags' field has been set */
    public boolean hasFlags() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'flags' field */
    public Builder clearFlags() {
      flags = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'price' field */
    public Double getPrice() {
      return price;
    }
    
    /** Sets the value of the 'price' field */
    public Builder setPrice(double value) {
      validate(fields()[9], value);
      this.price = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'price' field has been set */
    public boolean hasPrice() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'price' field */
    public Builder clearPrice() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'qty' field */
    public Integer getQty() {
      return qty;
    }
    
    /** Sets the value of the 'qty' field */
    public Builder setQty(int value) {
      validate(fields()[10], value);
      this.qty = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'qty' field has been set */
    public boolean hasQty() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'qty' field */
    public Builder clearQty() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'expirationDate' field */
    public String getExpirationDate() {
      return expirationDate;
    }
    
    /** Sets the value of the 'expirationDate' field */
    public Builder setExpirationDate(String value) {
      validate(fields()[11], value);
      this.expirationDate = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'expirationDate' field has been set */
    public boolean hasExpirationDate() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'expirationDate' field */
    public Builder clearExpirationDate() {
      expirationDate = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'createDate' field */
    public String getCreateDate() {
      return createDate;
    }
    
    /** Sets the value of the 'createDate' field */
    public Builder setCreateDate(String value) {
      validate(fields()[12], value);
      this.createDate = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'createDate' field has been set */
    public boolean hasCreateDate() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'createDate' field */
    public Builder clearCreateDate() {
      createDate = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    public QueryOrderStatusMessage build() {
      try {
        QueryOrderStatusMessage record = new QueryOrderStatusMessage();
        record.orderID = fieldSetFlags()[0] ? this.orderID : (Long) defaultValue(fields()[0]);
        record.brokerID = fieldSetFlags()[1] ? this.brokerID : (String) defaultValue(fields()[1]);
        record.accountID = fieldSetFlags()[2] ? this.accountID : (Long) defaultValue(fields()[2]);
        record.accountAuthID = fieldSetFlags()[3] ? this.accountAuthID : (String) defaultValue(fields()[3]);
        record.accountPassword = fieldSetFlags()[4] ? this.accountPassword : (String) defaultValue(fields()[4]);
        record.exchangeID = fieldSetFlags()[5] ? this.exchangeID : (String) defaultValue(fields()[5]);
        record.symbol = fieldSetFlags()[6] ? this.symbol : (String) defaultValue(fields()[6]);
        record.direction = fieldSetFlags()[7] ? this.direction : (OrderDirection1) defaultValue(fields()[7]);
        record.flags = fieldSetFlags()[8] ? this.flags : (java.util.List<String>) defaultValue(fields()[8]);
        record.price = fieldSetFlags()[9] ? this.price : (Double) defaultValue(fields()[9]);
        record.qty = fieldSetFlags()[10] ? this.qty : (Integer) defaultValue(fields()[10]);
        record.expirationDate = fieldSetFlags()[11] ? this.expirationDate : (String) defaultValue(fields()[11]);
        record.createDate = fieldSetFlags()[12] ? this.createDate : (String) defaultValue(fields()[12]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
