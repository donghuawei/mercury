/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransferSerial extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransferSerial\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"plateSerial\",\"type\":\"int\"},{\"name\":\"bankSerial\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"futureSerial\",\"type\":\"int\"},{\"name\":\"errorID\",\"type\":\"long\"},{\"name\":\"tradeTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankBranchID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankAccount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tradeCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tradeAmount\",\"type\":\"double\"},{\"name\":\"currencyID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"availabilityFlag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int plateSerial;
  @Deprecated public String bankSerial;
  @Deprecated public int futureSerial;
  @Deprecated public long errorID;
  @Deprecated public String tradeTime;
  @Deprecated public String bankId;
  @Deprecated public String bankBranchID;
  @Deprecated public String bankAccount;
  @Deprecated public String tradeCode;
  @Deprecated public double tradeAmount;
  @Deprecated public String currencyID;
  @Deprecated public String availabilityFlag;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public TransferSerial() {}

  /**
   * All-args constructor.
   */
  public TransferSerial(Integer plateSerial, String bankSerial, Integer futureSerial, Long errorID, String tradeTime, String bankId, String bankBranchID, String bankAccount, String tradeCode, Double tradeAmount, String currencyID, String availabilityFlag) {
    this.plateSerial = plateSerial;
    this.bankSerial = bankSerial;
    this.futureSerial = futureSerial;
    this.errorID = errorID;
    this.tradeTime = tradeTime;
    this.bankId = bankId;
    this.bankBranchID = bankBranchID;
    this.bankAccount = bankAccount;
    this.tradeCode = tradeCode;
    this.tradeAmount = tradeAmount;
    this.currencyID = currencyID;
    this.availabilityFlag = availabilityFlag;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return plateSerial;
    case 1: return bankSerial;
    case 2: return futureSerial;
    case 3: return errorID;
    case 4: return tradeTime;
    case 5: return bankId;
    case 6: return bankBranchID;
    case 7: return bankAccount;
    case 8: return tradeCode;
    case 9: return tradeAmount;
    case 10: return currencyID;
    case 11: return availabilityFlag;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: plateSerial = (Integer)value$; break;
    case 1: bankSerial = (String)value$; break;
    case 2: futureSerial = (Integer)value$; break;
    case 3: errorID = (Long)value$; break;
    case 4: tradeTime = (String)value$; break;
    case 5: bankId = (String)value$; break;
    case 6: bankBranchID = (String)value$; break;
    case 7: bankAccount = (String)value$; break;
    case 8: tradeCode = (String)value$; break;
    case 9: tradeAmount = (Double)value$; break;
    case 10: currencyID = (String)value$; break;
    case 11: availabilityFlag = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'plateSerial' field.
   */
  public Integer getPlateSerial() {
    return plateSerial;
  }

  /**
   * Sets the value of the 'plateSerial' field.
   * @param value the value to set.
   */
  public void setPlateSerial(Integer value) {
    this.plateSerial = value;
  }

  /**
   * Gets the value of the 'bankSerial' field.
   */
  public String getBankSerial() {
    return bankSerial;
  }

  /**
   * Sets the value of the 'bankSerial' field.
   * @param value the value to set.
   */
  public void setBankSerial(String value) {
    this.bankSerial = value;
  }

  /**
   * Gets the value of the 'futureSerial' field.
   */
  public Integer getFutureSerial() {
    return futureSerial;
  }

  /**
   * Sets the value of the 'futureSerial' field.
   * @param value the value to set.
   */
  public void setFutureSerial(Integer value) {
    this.futureSerial = value;
  }

  /**
   * Gets the value of the 'errorID' field.
   */
  public Long getErrorID() {
    return errorID;
  }

  /**
   * Sets the value of the 'errorID' field.
   * @param value the value to set.
   */
  public void setErrorID(Long value) {
    this.errorID = value;
  }

  /**
   * Gets the value of the 'tradeTime' field.
   */
  public String getTradeTime() {
    return tradeTime;
  }

  /**
   * Sets the value of the 'tradeTime' field.
   * @param value the value to set.
   */
  public void setTradeTime(String value) {
    this.tradeTime = value;
  }

  /**
   * Gets the value of the 'bankId' field.
   */
  public String getBankId() {
    return bankId;
  }

  /**
   * Sets the value of the 'bankId' field.
   * @param value the value to set.
   */
  public void setBankId(String value) {
    this.bankId = value;
  }

  /**
   * Gets the value of the 'bankBranchID' field.
   */
  public String getBankBranchID() {
    return bankBranchID;
  }

  /**
   * Sets the value of the 'bankBranchID' field.
   * @param value the value to set.
   */
  public void setBankBranchID(String value) {
    this.bankBranchID = value;
  }

  /**
   * Gets the value of the 'bankAccount' field.
   */
  public String getBankAccount() {
    return bankAccount;
  }

  /**
   * Sets the value of the 'bankAccount' field.
   * @param value the value to set.
   */
  public void setBankAccount(String value) {
    this.bankAccount = value;
  }

  /**
   * Gets the value of the 'tradeCode' field.
   */
  public String getTradeCode() {
    return tradeCode;
  }

  /**
   * Sets the value of the 'tradeCode' field.
   * @param value the value to set.
   */
  public void setTradeCode(String value) {
    this.tradeCode = value;
  }

  /**
   * Gets the value of the 'tradeAmount' field.
   */
  public Double getTradeAmount() {
    return tradeAmount;
  }

  /**
   * Sets the value of the 'tradeAmount' field.
   * @param value the value to set.
   */
  public void setTradeAmount(Double value) {
    this.tradeAmount = value;
  }

  /**
   * Gets the value of the 'currencyID' field.
   */
  public String getCurrencyID() {
    return currencyID;
  }

  /**
   * Sets the value of the 'currencyID' field.
   * @param value the value to set.
   */
  public void setCurrencyID(String value) {
    this.currencyID = value;
  }

  /**
   * Gets the value of the 'availabilityFlag' field.
   */
  public String getAvailabilityFlag() {
    return availabilityFlag;
  }

  /**
   * Sets the value of the 'availabilityFlag' field.
   * @param value the value to set.
   */
  public void setAvailabilityFlag(String value) {
    this.availabilityFlag = value;
  }

  /** Creates a new TransferSerial RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new TransferSerial RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new TransferSerial RecordBuilder by copying an existing TransferSerial instance */
  public static Builder newBuilder(TransferSerial other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for TransferSerial instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransferSerial>
    implements org.apache.avro.data.RecordBuilder<TransferSerial> {

    private int plateSerial;
    private String bankSerial;
    private int futureSerial;
    private long errorID;
    private String tradeTime;
    private String bankId;
    private String bankBranchID;
    private String bankAccount;
    private String tradeCode;
    private double tradeAmount;
    private String currencyID;
    private String availabilityFlag;

    /** Creates a new Builder */
    private Builder() {
      super(TransferSerial.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.plateSerial)) {
        this.plateSerial = data().deepCopy(fields()[0].schema(), other.plateSerial);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bankSerial)) {
        this.bankSerial = data().deepCopy(fields()[1].schema(), other.bankSerial);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.futureSerial)) {
        this.futureSerial = data().deepCopy(fields()[2].schema(), other.futureSerial);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.errorID)) {
        this.errorID = data().deepCopy(fields()[3].schema(), other.errorID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[4].schema(), other.tradeTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bankId)) {
        this.bankId = data().deepCopy(fields()[5].schema(), other.bankId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bankBranchID)) {
        this.bankBranchID = data().deepCopy(fields()[6].schema(), other.bankBranchID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bankAccount)) {
        this.bankAccount = data().deepCopy(fields()[7].schema(), other.bankAccount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.tradeCode)) {
        this.tradeCode = data().deepCopy(fields()[8].schema(), other.tradeCode);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.tradeAmount)) {
        this.tradeAmount = data().deepCopy(fields()[9].schema(), other.tradeAmount);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.currencyID)) {
        this.currencyID = data().deepCopy(fields()[10].schema(), other.currencyID);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.availabilityFlag)) {
        this.availabilityFlag = data().deepCopy(fields()[11].schema(), other.availabilityFlag);
        fieldSetFlags()[11] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TransferSerial instance */
    private Builder(TransferSerial other) {
            super(TransferSerial.SCHEMA$);
      if (isValidValue(fields()[0], other.plateSerial)) {
        this.plateSerial = data().deepCopy(fields()[0].schema(), other.plateSerial);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bankSerial)) {
        this.bankSerial = data().deepCopy(fields()[1].schema(), other.bankSerial);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.futureSerial)) {
        this.futureSerial = data().deepCopy(fields()[2].schema(), other.futureSerial);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.errorID)) {
        this.errorID = data().deepCopy(fields()[3].schema(), other.errorID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[4].schema(), other.tradeTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bankId)) {
        this.bankId = data().deepCopy(fields()[5].schema(), other.bankId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bankBranchID)) {
        this.bankBranchID = data().deepCopy(fields()[6].schema(), other.bankBranchID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bankAccount)) {
        this.bankAccount = data().deepCopy(fields()[7].schema(), other.bankAccount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.tradeCode)) {
        this.tradeCode = data().deepCopy(fields()[8].schema(), other.tradeCode);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.tradeAmount)) {
        this.tradeAmount = data().deepCopy(fields()[9].schema(), other.tradeAmount);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.currencyID)) {
        this.currencyID = data().deepCopy(fields()[10].schema(), other.currencyID);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.availabilityFlag)) {
        this.availabilityFlag = data().deepCopy(fields()[11].schema(), other.availabilityFlag);
        fieldSetFlags()[11] = true;
      }
    }

    /** Gets the value of the 'plateSerial' field */
    public Integer getPlateSerial() {
      return plateSerial;
    }
    
    /** Sets the value of the 'plateSerial' field */
    public Builder setPlateSerial(int value) {
      validate(fields()[0], value);
      this.plateSerial = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'plateSerial' field has been set */
    public boolean hasPlateSerial() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'plateSerial' field */
    public Builder clearPlateSerial() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'bankSerial' field */
    public String getBankSerial() {
      return bankSerial;
    }
    
    /** Sets the value of the 'bankSerial' field */
    public Builder setBankSerial(String value) {
      validate(fields()[1], value);
      this.bankSerial = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'bankSerial' field has been set */
    public boolean hasBankSerial() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'bankSerial' field */
    public Builder clearBankSerial() {
      bankSerial = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'futureSerial' field */
    public Integer getFutureSerial() {
      return futureSerial;
    }
    
    /** Sets the value of the 'futureSerial' field */
    public Builder setFutureSerial(int value) {
      validate(fields()[2], value);
      this.futureSerial = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'futureSerial' field has been set */
    public boolean hasFutureSerial() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'futureSerial' field */
    public Builder clearFutureSerial() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'errorID' field */
    public Long getErrorID() {
      return errorID;
    }
    
    /** Sets the value of the 'errorID' field */
    public Builder setErrorID(long value) {
      validate(fields()[3], value);
      this.errorID = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'errorID' field has been set */
    public boolean hasErrorID() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'errorID' field */
    public Builder clearErrorID() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'tradeTime' field */
    public String getTradeTime() {
      return tradeTime;
    }
    
    /** Sets the value of the 'tradeTime' field */
    public Builder setTradeTime(String value) {
      validate(fields()[4], value);
      this.tradeTime = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'tradeTime' field has been set */
    public boolean hasTradeTime() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'tradeTime' field */
    public Builder clearTradeTime() {
      tradeTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'bankId' field */
    public String getBankId() {
      return bankId;
    }
    
    /** Sets the value of the 'bankId' field */
    public Builder setBankId(String value) {
      validate(fields()[5], value);
      this.bankId = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'bankId' field has been set */
    public boolean hasBankId() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'bankId' field */
    public Builder clearBankId() {
      bankId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'bankBranchID' field */
    public String getBankBranchID() {
      return bankBranchID;
    }
    
    /** Sets the value of the 'bankBranchID' field */
    public Builder setBankBranchID(String value) {
      validate(fields()[6], value);
      this.bankBranchID = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'bankBranchID' field has been set */
    public boolean hasBankBranchID() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'bankBranchID' field */
    public Builder clearBankBranchID() {
      bankBranchID = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'bankAccount' field */
    public String getBankAccount() {
      return bankAccount;
    }
    
    /** Sets the value of the 'bankAccount' field */
    public Builder setBankAccount(String value) {
      validate(fields()[7], value);
      this.bankAccount = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'bankAccount' field has been set */
    public boolean hasBankAccount() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'bankAccount' field */
    public Builder clearBankAccount() {
      bankAccount = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'tradeCode' field */
    public String getTradeCode() {
      return tradeCode;
    }
    
    /** Sets the value of the 'tradeCode' field */
    public Builder setTradeCode(String value) {
      validate(fields()[8], value);
      this.tradeCode = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'tradeCode' field has been set */
    public boolean hasTradeCode() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'tradeCode' field */
    public Builder clearTradeCode() {
      tradeCode = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'tradeAmount' field */
    public Double getTradeAmount() {
      return tradeAmount;
    }
    
    /** Sets the value of the 'tradeAmount' field */
    public Builder setTradeAmount(double value) {
      validate(fields()[9], value);
      this.tradeAmount = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'tradeAmount' field has been set */
    public boolean hasTradeAmount() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'tradeAmount' field */
    public Builder clearTradeAmount() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'currencyID' field */
    public String getCurrencyID() {
      return currencyID;
    }
    
    /** Sets the value of the 'currencyID' field */
    public Builder setCurrencyID(String value) {
      validate(fields()[10], value);
      this.currencyID = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'currencyID' field has been set */
    public boolean hasCurrencyID() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'currencyID' field */
    public Builder clearCurrencyID() {
      currencyID = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'availabilityFlag' field */
    public String getAvailabilityFlag() {
      return availabilityFlag;
    }
    
    /** Sets the value of the 'availabilityFlag' field */
    public Builder setAvailabilityFlag(String value) {
      validate(fields()[11], value);
      this.availabilityFlag = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'availabilityFlag' field has been set */
    public boolean hasAvailabilityFlag() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'availabilityFlag' field */
    public Builder clearAvailabilityFlag() {
      availabilityFlag = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public TransferSerial build() {
      try {
        TransferSerial record = new TransferSerial();
        record.plateSerial = fieldSetFlags()[0] ? this.plateSerial : (Integer) defaultValue(fields()[0]);
        record.bankSerial = fieldSetFlags()[1] ? this.bankSerial : (String) defaultValue(fields()[1]);
        record.futureSerial = fieldSetFlags()[2] ? this.futureSerial : (Integer) defaultValue(fields()[2]);
        record.errorID = fieldSetFlags()[3] ? this.errorID : (Long) defaultValue(fields()[3]);
        record.tradeTime = fieldSetFlags()[4] ? this.tradeTime : (String) defaultValue(fields()[4]);
        record.bankId = fieldSetFlags()[5] ? this.bankId : (String) defaultValue(fields()[5]);
        record.bankBranchID = fieldSetFlags()[6] ? this.bankBranchID : (String) defaultValue(fields()[6]);
        record.bankAccount = fieldSetFlags()[7] ? this.bankAccount : (String) defaultValue(fields()[7]);
        record.tradeCode = fieldSetFlags()[8] ? this.tradeCode : (String) defaultValue(fields()[8]);
        record.tradeAmount = fieldSetFlags()[9] ? this.tradeAmount : (Double) defaultValue(fields()[9]);
        record.currencyID = fieldSetFlags()[10] ? this.currencyID : (String) defaultValue(fields()[10]);
        record.availabilityFlag = fieldSetFlags()[11] ? this.availabilityFlag : (String) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
