/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CancelOrderMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CancelOrderMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"orderID\",\"type\":\"long\"},{\"name\":\"exchangeOrderID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"brokerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountId\",\"type\":\"long\"},{\"name\":\"accountAuthId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountPassword\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"exchangeID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"createDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long orderID;
  @Deprecated public String exchangeOrderID;
  @Deprecated public String brokerId;
  @Deprecated public long accountId;
  @Deprecated public String accountAuthId;
  @Deprecated public String accountPassword;
  @Deprecated public String exchangeID;
  @Deprecated public String symbol;
  @Deprecated public int qty;
  @Deprecated public String createDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public CancelOrderMessage() {}

  /**
   * All-args constructor.
   */
  public CancelOrderMessage(Long orderID, String exchangeOrderID, String brokerId, Long accountId, String accountAuthId, String accountPassword, String exchangeID, String symbol, Integer qty, String createDate) {
    this.orderID = orderID;
    this.exchangeOrderID = exchangeOrderID;
    this.brokerId = brokerId;
    this.accountId = accountId;
    this.accountAuthId = accountAuthId;
    this.accountPassword = accountPassword;
    this.exchangeID = exchangeID;
    this.symbol = symbol;
    this.qty = qty;
    this.createDate = createDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return orderID;
    case 1: return exchangeOrderID;
    case 2: return brokerId;
    case 3: return accountId;
    case 4: return accountAuthId;
    case 5: return accountPassword;
    case 6: return exchangeID;
    case 7: return symbol;
    case 8: return qty;
    case 9: return createDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: orderID = (Long)value$; break;
    case 1: exchangeOrderID = (String)value$; break;
    case 2: brokerId = (String)value$; break;
    case 3: accountId = (Long)value$; break;
    case 4: accountAuthId = (String)value$; break;
    case 5: accountPassword = (String)value$; break;
    case 6: exchangeID = (String)value$; break;
    case 7: symbol = (String)value$; break;
    case 8: qty = (Integer)value$; break;
    case 9: createDate = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderID' field.
   */
  public Long getOrderID() {
    return orderID;
  }

  /**
   * Sets the value of the 'orderID' field.
   * @param value the value to set.
   */
  public void setOrderID(Long value) {
    this.orderID = value;
  }

  /**
   * Gets the value of the 'exchangeOrderID' field.
   */
  public String getExchangeOrderID() {
    return exchangeOrderID;
  }

  /**
   * Sets the value of the 'exchangeOrderID' field.
   * @param value the value to set.
   */
  public void setExchangeOrderID(String value) {
    this.exchangeOrderID = value;
  }

  /**
   * Gets the value of the 'brokerId' field.
   */
  public String getBrokerId() {
    return brokerId;
  }

  /**
   * Sets the value of the 'brokerId' field.
   * @param value the value to set.
   */
  public void setBrokerId(String value) {
    this.brokerId = value;
  }

  /**
   * Gets the value of the 'accountId' field.
   */
  public Long getAccountId() {
    return accountId;
  }

  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(Long value) {
    this.accountId = value;
  }

  /**
   * Gets the value of the 'accountAuthId' field.
   */
  public String getAccountAuthId() {
    return accountAuthId;
  }

  /**
   * Sets the value of the 'accountAuthId' field.
   * @param value the value to set.
   */
  public void setAccountAuthId(String value) {
    this.accountAuthId = value;
  }

  /**
   * Gets the value of the 'accountPassword' field.
   */
  public String getAccountPassword() {
    return accountPassword;
  }

  /**
   * Sets the value of the 'accountPassword' field.
   * @param value the value to set.
   */
  public void setAccountPassword(String value) {
    this.accountPassword = value;
  }

  /**
   * Gets the value of the 'exchangeID' field.
   */
  public String getExchangeID() {
    return exchangeID;
  }

  /**
   * Sets the value of the 'exchangeID' field.
   * @param value the value to set.
   */
  public void setExchangeID(String value) {
    this.exchangeID = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   */
  public String getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'qty' field.
   */
  public Integer getQty() {
    return qty;
  }

  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(Integer value) {
    this.qty = value;
  }

  /**
   * Gets the value of the 'createDate' field.
   */
  public String getCreateDate() {
    return createDate;
  }

  /**
   * Sets the value of the 'createDate' field.
   * @param value the value to set.
   */
  public void setCreateDate(String value) {
    this.createDate = value;
  }

  /** Creates a new CancelOrderMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new CancelOrderMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new CancelOrderMessage RecordBuilder by copying an existing CancelOrderMessage instance */
  public static Builder newBuilder(CancelOrderMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for CancelOrderMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CancelOrderMessage>
    implements org.apache.avro.data.RecordBuilder<CancelOrderMessage> {

    private long orderID;
    private String exchangeOrderID;
    private String brokerId;
    private long accountId;
    private String accountAuthId;
    private String accountPassword;
    private String exchangeID;
    private String symbol;
    private int qty;
    private String createDate;

    /** Creates a new Builder */
    private Builder() {
      super(CancelOrderMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderID)) {
        this.orderID = data().deepCopy(fields()[0].schema(), other.orderID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.exchangeOrderID)) {
        this.exchangeOrderID = data().deepCopy(fields()[1].schema(), other.exchangeOrderID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[2].schema(), other.brokerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountId)) {
        this.accountId = data().deepCopy(fields()[3].schema(), other.accountId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.accountAuthId)) {
        this.accountAuthId = data().deepCopy(fields()[4].schema(), other.accountAuthId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.accountPassword)) {
        this.accountPassword = data().deepCopy(fields()[5].schema(), other.accountPassword);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.exchangeID)) {
        this.exchangeID = data().deepCopy(fields()[6].schema(), other.exchangeID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.symbol)) {
        this.symbol = data().deepCopy(fields()[7].schema(), other.symbol);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.qty)) {
        this.qty = data().deepCopy(fields()[8].schema(), other.qty);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.createDate)) {
        this.createDate = data().deepCopy(fields()[9].schema(), other.createDate);
        fieldSetFlags()[9] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CancelOrderMessage instance */
    private Builder(CancelOrderMessage other) {
            super(CancelOrderMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.orderID)) {
        this.orderID = data().deepCopy(fields()[0].schema(), other.orderID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.exchangeOrderID)) {
        this.exchangeOrderID = data().deepCopy(fields()[1].schema(), other.exchangeOrderID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[2].schema(), other.brokerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountId)) {
        this.accountId = data().deepCopy(fields()[3].schema(), other.accountId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.accountAuthId)) {
        this.accountAuthId = data().deepCopy(fields()[4].schema(), other.accountAuthId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.accountPassword)) {
        this.accountPassword = data().deepCopy(fields()[5].schema(), other.accountPassword);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.exchangeID)) {
        this.exchangeID = data().deepCopy(fields()[6].schema(), other.exchangeID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.symbol)) {
        this.symbol = data().deepCopy(fields()[7].schema(), other.symbol);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.qty)) {
        this.qty = data().deepCopy(fields()[8].schema(), other.qty);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.createDate)) {
        this.createDate = data().deepCopy(fields()[9].schema(), other.createDate);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'orderID' field */
    public Long getOrderID() {
      return orderID;
    }
    
    /** Sets the value of the 'orderID' field */
    public Builder setOrderID(long value) {
      validate(fields()[0], value);
      this.orderID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'orderID' field has been set */
    public boolean hasOrderID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'orderID' field */
    public Builder clearOrderID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'exchangeOrderID' field */
    public String getExchangeOrderID() {
      return exchangeOrderID;
    }
    
    /** Sets the value of the 'exchangeOrderID' field */
    public Builder setExchangeOrderID(String value) {
      validate(fields()[1], value);
      this.exchangeOrderID = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'exchangeOrderID' field has been set */
    public boolean hasExchangeOrderID() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'exchangeOrderID' field */
    public Builder clearExchangeOrderID() {
      exchangeOrderID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'brokerId' field */
    public String getBrokerId() {
      return brokerId;
    }
    
    /** Sets the value of the 'brokerId' field */
    public Builder setBrokerId(String value) {
      validate(fields()[2], value);
      this.brokerId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'brokerId' field has been set */
    public boolean hasBrokerId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'brokerId' field */
    public Builder clearBrokerId() {
      brokerId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'accountId' field */
    public Long getAccountId() {
      return accountId;
    }
    
    /** Sets the value of the 'accountId' field */
    public Builder setAccountId(long value) {
      validate(fields()[3], value);
      this.accountId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'accountId' field has been set */
    public boolean hasAccountId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'accountId' field */
    public Builder clearAccountId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'accountAuthId' field */
    public String getAccountAuthId() {
      return accountAuthId;
    }
    
    /** Sets the value of the 'accountAuthId' field */
    public Builder setAccountAuthId(String value) {
      validate(fields()[4], value);
      this.accountAuthId = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'accountAuthId' field has been set */
    public boolean hasAccountAuthId() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'accountAuthId' field */
    public Builder clearAccountAuthId() {
      accountAuthId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'accountPassword' field */
    public String getAccountPassword() {
      return accountPassword;
    }
    
    /** Sets the value of the 'accountPassword' field */
    public Builder setAccountPassword(String value) {
      validate(fields()[5], value);
      this.accountPassword = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'accountPassword' field has been set */
    public boolean hasAccountPassword() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'accountPassword' field */
    public Builder clearAccountPassword() {
      accountPassword = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'exchangeID' field */
    public String getExchangeID() {
      return exchangeID;
    }
    
    /** Sets the value of the 'exchangeID' field */
    public Builder setExchangeID(String value) {
      validate(fields()[6], value);
      this.exchangeID = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'exchangeID' field has been set */
    public boolean hasExchangeID() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'exchangeID' field */
    public Builder clearExchangeID() {
      exchangeID = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'symbol' field */
    public String getSymbol() {
      return symbol;
    }
    
    /** Sets the value of the 'symbol' field */
    public Builder setSymbol(String value) {
      validate(fields()[7], value);
      this.symbol = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'symbol' field has been set */
    public boolean hasSymbol() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'symbol' field */
    public Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'qty' field */
    public Integer getQty() {
      return qty;
    }
    
    /** Sets the value of the 'qty' field */
    public Builder setQty(int value) {
      validate(fields()[8], value);
      this.qty = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'qty' field has been set */
    public boolean hasQty() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'qty' field */
    public Builder clearQty() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'createDate' field */
    public String getCreateDate() {
      return createDate;
    }
    
    /** Sets the value of the 'createDate' field */
    public Builder setCreateDate(String value) {
      validate(fields()[9], value);
      this.createDate = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'createDate' field has been set */
    public boolean hasCreateDate() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'createDate' field */
    public Builder clearCreateDate() {
      createDate = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public CancelOrderMessage build() {
      try {
        CancelOrderMessage record = new CancelOrderMessage();
        record.orderID = fieldSetFlags()[0] ? this.orderID : (Long) defaultValue(fields()[0]);
        record.exchangeOrderID = fieldSetFlags()[1] ? this.exchangeOrderID : (String) defaultValue(fields()[1]);
        record.brokerId = fieldSetFlags()[2] ? this.brokerId : (String) defaultValue(fields()[2]);
        record.accountId = fieldSetFlags()[3] ? this.accountId : (Long) defaultValue(fields()[3]);
        record.accountAuthId = fieldSetFlags()[4] ? this.accountAuthId : (String) defaultValue(fields()[4]);
        record.accountPassword = fieldSetFlags()[5] ? this.accountPassword : (String) defaultValue(fields()[5]);
        record.exchangeID = fieldSetFlags()[6] ? this.exchangeID : (String) defaultValue(fields()[6]);
        record.symbol = fieldSetFlags()[7] ? this.symbol : (String) defaultValue(fields()[7]);
        record.qty = fieldSetFlags()[8] ? this.qty : (Integer) defaultValue(fields()[8]);
        record.createDate = fieldSetFlags()[9] ? this.createDate : (String) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
