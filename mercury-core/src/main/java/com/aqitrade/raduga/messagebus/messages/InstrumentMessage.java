/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class InstrumentMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InstrumentMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"exchangeID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instrumentName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instrumentDesignator\",\"type\":{\"type\":\"enum\",\"name\":\"InstrumentDesignator\",\"symbols\":[\"cash_instrument\",\"future_instrument\",\"stock_instrument\"]}},{\"name\":\"longMarginRate\",\"type\":\"double\"},{\"name\":\"shortMarginRate\",\"type\":\"double\"},{\"name\":\"openComissionRate\",\"type\":\"double\"},{\"name\":\"closeComissionRate\",\"type\":\"double\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"openPrice\",\"type\":\"double\"},{\"name\":\"closePrice\",\"type\":\"double\"},{\"name\":\"highPrice\",\"type\":\"double\"},{\"name\":\"lowPrice\",\"type\":\"double\"},{\"name\":\"highLimit\",\"type\":\"double\"},{\"name\":\"lowLimit\",\"type\":\"double\"},{\"name\":\"volume\",\"type\":\"long\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"settlementPrice\",\"type\":\"double\"},{\"name\":\"bid\",\"type\":\"double\"},{\"name\":\"ask\",\"type\":\"double\"},{\"name\":\"unitSize\",\"type\":\"int\"},{\"name\":\"createDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"openInterest\",\"type\":\"double\"},{\"name\":\"priceTick\",\"type\":\"double\"},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"closeTodayComissionRate\",\"type\":\"double\"},{\"name\":\"openComissionRateByVolume\",\"type\":\"double\"},{\"name\":\"closeComissionRateByVolume\",\"type\":\"double\"},{\"name\":\"askVolume\",\"type\":\"int\"},{\"name\":\"bidVolume\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String exchangeID;
  @Deprecated public String instrumentName;
  @Deprecated public com.aqitrade.raduga.messagebus.messages.InstrumentDesignator instrumentDesignator;
  @Deprecated public double longMarginRate;
  @Deprecated public double shortMarginRate;
  @Deprecated public double openComissionRate;
  @Deprecated public double closeComissionRate;
  @Deprecated public double price;
  @Deprecated public double openPrice;
  @Deprecated public double closePrice;
  @Deprecated public double highPrice;
  @Deprecated public double lowPrice;
  @Deprecated public double highLimit;
  @Deprecated public double lowLimit;
  @Deprecated public long volume;
  @Deprecated public double amount;
  @Deprecated public double settlementPrice;
  @Deprecated public double bid;
  @Deprecated public double ask;
  @Deprecated public int unitSize;
  @Deprecated public String createDate;
  @Deprecated public double openInterest;
  @Deprecated public double priceTick;
  @Deprecated public String symbol;
  @Deprecated public String currency;
  @Deprecated public double closeTodayComissionRate;
  @Deprecated public double openComissionRateByVolume;
  @Deprecated public double closeComissionRateByVolume;
  @Deprecated public int askVolume;
  @Deprecated public int bidVolume;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public InstrumentMessage() {}

  /**
   * All-args constructor.
   */
  public InstrumentMessage(String exchangeID, String instrumentName, com.aqitrade.raduga.messagebus.messages.InstrumentDesignator instrumentDesignator, Double longMarginRate, Double shortMarginRate, Double openComissionRate, Double closeComissionRate, Double price, Double openPrice, Double closePrice, Double highPrice, Double lowPrice, Double highLimit, Double lowLimit, Long volume, Double amount, Double settlementPrice, Double bid, Double ask, Integer unitSize, String createDate, Double openInterest, Double priceTick, String symbol, String currency, Double closeTodayComissionRate, Double openComissionRateByVolume, Double closeComissionRateByVolume, Integer askVolume, Integer bidVolume) {
    this.exchangeID = exchangeID;
    this.instrumentName = instrumentName;
    this.instrumentDesignator = instrumentDesignator;
    this.longMarginRate = longMarginRate;
    this.shortMarginRate = shortMarginRate;
    this.openComissionRate = openComissionRate;
    this.closeComissionRate = closeComissionRate;
    this.price = price;
    this.openPrice = openPrice;
    this.closePrice = closePrice;
    this.highPrice = highPrice;
    this.lowPrice = lowPrice;
    this.highLimit = highLimit;
    this.lowLimit = lowLimit;
    this.volume = volume;
    this.amount = amount;
    this.settlementPrice = settlementPrice;
    this.bid = bid;
    this.ask = ask;
    this.unitSize = unitSize;
    this.createDate = createDate;
    this.openInterest = openInterest;
    this.priceTick = priceTick;
    this.symbol = symbol;
    this.currency = currency;
    this.closeTodayComissionRate = closeTodayComissionRate;
    this.openComissionRateByVolume = openComissionRateByVolume;
    this.closeComissionRateByVolume = closeComissionRateByVolume;
    this.askVolume = askVolume;
    this.bidVolume = bidVolume;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return exchangeID;
    case 1: return instrumentName;
    case 2: return instrumentDesignator;
    case 3: return longMarginRate;
    case 4: return shortMarginRate;
    case 5: return openComissionRate;
    case 6: return closeComissionRate;
    case 7: return price;
    case 8: return openPrice;
    case 9: return closePrice;
    case 10: return highPrice;
    case 11: return lowPrice;
    case 12: return highLimit;
    case 13: return lowLimit;
    case 14: return volume;
    case 15: return amount;
    case 16: return settlementPrice;
    case 17: return bid;
    case 18: return ask;
    case 19: return unitSize;
    case 20: return createDate;
    case 21: return openInterest;
    case 22: return priceTick;
    case 23: return symbol;
    case 24: return currency;
    case 25: return closeTodayComissionRate;
    case 26: return openComissionRateByVolume;
    case 27: return closeComissionRateByVolume;
    case 28: return askVolume;
    case 29: return bidVolume;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: exchangeID = (String)value$; break;
    case 1: instrumentName = (String)value$; break;
    case 2: instrumentDesignator = (com.aqitrade.raduga.messagebus.messages.InstrumentDesignator)value$; break;
    case 3: longMarginRate = (Double)value$; break;
    case 4: shortMarginRate = (Double)value$; break;
    case 5: openComissionRate = (Double)value$; break;
    case 6: closeComissionRate = (Double)value$; break;
    case 7: price = (Double)value$; break;
    case 8: openPrice = (Double)value$; break;
    case 9: closePrice = (Double)value$; break;
    case 10: highPrice = (Double)value$; break;
    case 11: lowPrice = (Double)value$; break;
    case 12: highLimit = (Double)value$; break;
    case 13: lowLimit = (Double)value$; break;
    case 14: volume = (Long)value$; break;
    case 15: amount = (Double)value$; break;
    case 16: settlementPrice = (Double)value$; break;
    case 17: bid = (Double)value$; break;
    case 18: ask = (Double)value$; break;
    case 19: unitSize = (Integer)value$; break;
    case 20: createDate = (String)value$; break;
    case 21: openInterest = (Double)value$; break;
    case 22: priceTick = (Double)value$; break;
    case 23: symbol = (String)value$; break;
    case 24: currency = (String)value$; break;
    case 25: closeTodayComissionRate = (Double)value$; break;
    case 26: openComissionRateByVolume = (Double)value$; break;
    case 27: closeComissionRateByVolume = (Double)value$; break;
    case 28: askVolume = (Integer)value$; break;
    case 29: bidVolume = (Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'exchangeID' field.
   */
  public String getExchangeID() {
    return exchangeID;
  }

  /**
   * Sets the value of the 'exchangeID' field.
   * @param value the value to set.
   */
  public void setExchangeID(String value) {
    this.exchangeID = value;
  }

  /**
   * Gets the value of the 'instrumentName' field.
   */
  public String getInstrumentName() {
    return instrumentName;
  }

  /**
   * Sets the value of the 'instrumentName' field.
   * @param value the value to set.
   */
  public void setInstrumentName(String value) {
    this.instrumentName = value;
  }

  /**
   * Gets the value of the 'instrumentDesignator' field.
   */
  public com.aqitrade.raduga.messagebus.messages.InstrumentDesignator getInstrumentDesignator() {
    return instrumentDesignator;
  }

  /**
   * Sets the value of the 'instrumentDesignator' field.
   * @param value the value to set.
   */
  public void setInstrumentDesignator(com.aqitrade.raduga.messagebus.messages.InstrumentDesignator value) {
    this.instrumentDesignator = value;
  }

  /**
   * Gets the value of the 'longMarginRate' field.
   */
  public Double getLongMarginRate() {
    return longMarginRate;
  }

  /**
   * Sets the value of the 'longMarginRate' field.
   * @param value the value to set.
   */
  public void setLongMarginRate(Double value) {
    this.longMarginRate = value;
  }

  /**
   * Gets the value of the 'shortMarginRate' field.
   */
  public Double getShortMarginRate() {
    return shortMarginRate;
  }

  /**
   * Sets the value of the 'shortMarginRate' field.
   * @param value the value to set.
   */
  public void setShortMarginRate(Double value) {
    this.shortMarginRate = value;
  }

  /**
   * Gets the value of the 'openComissionRate' field.
   */
  public Double getOpenComissionRate() {
    return openComissionRate;
  }

  /**
   * Sets the value of the 'openComissionRate' field.
   * @param value the value to set.
   */
  public void setOpenComissionRate(Double value) {
    this.openComissionRate = value;
  }

  /**
   * Gets the value of the 'closeComissionRate' field.
   */
  public Double getCloseComissionRate() {
    return closeComissionRate;
  }

  /**
   * Sets the value of the 'closeComissionRate' field.
   * @param value the value to set.
   */
  public void setCloseComissionRate(Double value) {
    this.closeComissionRate = value;
  }

  /**
   * Gets the value of the 'price' field.
   */
  public Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'openPrice' field.
   */
  public Double getOpenPrice() {
    return openPrice;
  }

  /**
   * Sets the value of the 'openPrice' field.
   * @param value the value to set.
   */
  public void setOpenPrice(Double value) {
    this.openPrice = value;
  }

  /**
   * Gets the value of the 'closePrice' field.
   */
  public Double getClosePrice() {
    return closePrice;
  }

  /**
   * Sets the value of the 'closePrice' field.
   * @param value the value to set.
   */
  public void setClosePrice(Double value) {
    this.closePrice = value;
  }

  /**
   * Gets the value of the 'highPrice' field.
   */
  public Double getHighPrice() {
    return highPrice;
  }

  /**
   * Sets the value of the 'highPrice' field.
   * @param value the value to set.
   */
  public void setHighPrice(Double value) {
    this.highPrice = value;
  }

  /**
   * Gets the value of the 'lowPrice' field.
   */
  public Double getLowPrice() {
    return lowPrice;
  }

  /**
   * Sets the value of the 'lowPrice' field.
   * @param value the value to set.
   */
  public void setLowPrice(Double value) {
    this.lowPrice = value;
  }

  /**
   * Gets the value of the 'highLimit' field.
   */
  public Double getHighLimit() {
    return highLimit;
  }

  /**
   * Sets the value of the 'highLimit' field.
   * @param value the value to set.
   */
  public void setHighLimit(Double value) {
    this.highLimit = value;
  }

  /**
   * Gets the value of the 'lowLimit' field.
   */
  public Double getLowLimit() {
    return lowLimit;
  }

  /**
   * Sets the value of the 'lowLimit' field.
   * @param value the value to set.
   */
  public void setLowLimit(Double value) {
    this.lowLimit = value;
  }

  /**
   * Gets the value of the 'volume' field.
   */
  public Long getVolume() {
    return volume;
  }

  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(Long value) {
    this.volume = value;
  }

  /**
   * Gets the value of the 'amount' field.
   */
  public Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'settlementPrice' field.
   */
  public Double getSettlementPrice() {
    return settlementPrice;
  }

  /**
   * Sets the value of the 'settlementPrice' field.
   * @param value the value to set.
   */
  public void setSettlementPrice(Double value) {
    this.settlementPrice = value;
  }

  /**
   * Gets the value of the 'bid' field.
   */
  public Double getBid() {
    return bid;
  }

  /**
   * Sets the value of the 'bid' field.
   * @param value the value to set.
   */
  public void setBid(Double value) {
    this.bid = value;
  }

  /**
   * Gets the value of the 'ask' field.
   */
  public Double getAsk() {
    return ask;
  }

  /**
   * Sets the value of the 'ask' field.
   * @param value the value to set.
   */
  public void setAsk(Double value) {
    this.ask = value;
  }

  /**
   * Gets the value of the 'unitSize' field.
   */
  public Integer getUnitSize() {
    return unitSize;
  }

  /**
   * Sets the value of the 'unitSize' field.
   * @param value the value to set.
   */
  public void setUnitSize(Integer value) {
    this.unitSize = value;
  }

  /**
   * Gets the value of the 'createDate' field.
   */
  public String getCreateDate() {
    return createDate;
  }

  /**
   * Sets the value of the 'createDate' field.
   * @param value the value to set.
   */
  public void setCreateDate(String value) {
    this.createDate = value;
  }

  /**
   * Gets the value of the 'openInterest' field.
   */
  public Double getOpenInterest() {
    return openInterest;
  }

  /**
   * Sets the value of the 'openInterest' field.
   * @param value the value to set.
   */
  public void setOpenInterest(Double value) {
    this.openInterest = value;
  }

  /**
   * Gets the value of the 'priceTick' field.
   */
  public Double getPriceTick() {
    return priceTick;
  }

  /**
   * Sets the value of the 'priceTick' field.
   * @param value the value to set.
   */
  public void setPriceTick(Double value) {
    this.priceTick = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   */
  public String getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'currency' field.
   */
  public String getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'closeTodayComissionRate' field.
   */
  public Double getCloseTodayComissionRate() {
    return closeTodayComissionRate;
  }

  /**
   * Sets the value of the 'closeTodayComissionRate' field.
   * @param value the value to set.
   */
  public void setCloseTodayComissionRate(Double value) {
    this.closeTodayComissionRate = value;
  }

  /**
   * Gets the value of the 'openComissionRateByVolume' field.
   */
  public Double getOpenComissionRateByVolume() {
    return openComissionRateByVolume;
  }

  /**
   * Sets the value of the 'openComissionRateByVolume' field.
   * @param value the value to set.
   */
  public void setOpenComissionRateByVolume(Double value) {
    this.openComissionRateByVolume = value;
  }

  /**
   * Gets the value of the 'closeComissionRateByVolume' field.
   */
  public Double getCloseComissionRateByVolume() {
    return closeComissionRateByVolume;
  }

  /**
   * Sets the value of the 'closeComissionRateByVolume' field.
   * @param value the value to set.
   */
  public void setCloseComissionRateByVolume(Double value) {
    this.closeComissionRateByVolume = value;
  }

  /**
   * Gets the value of the 'askVolume' field.
   */
  public Integer getAskVolume() {
    return askVolume;
  }

  /**
   * Sets the value of the 'askVolume' field.
   * @param value the value to set.
   */
  public void setAskVolume(Integer value) {
    this.askVolume = value;
  }

  /**
   * Gets the value of the 'bidVolume' field.
   */
  public Integer getBidVolume() {
    return bidVolume;
  }

  /**
   * Sets the value of the 'bidVolume' field.
   * @param value the value to set.
   */
  public void setBidVolume(Integer value) {
    this.bidVolume = value;
  }

  /** Creates a new InstrumentMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new InstrumentMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new InstrumentMessage RecordBuilder by copying an existing InstrumentMessage instance */
  public static Builder newBuilder(InstrumentMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for InstrumentMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InstrumentMessage>
    implements org.apache.avro.data.RecordBuilder<InstrumentMessage> {

    private String exchangeID;
    private String instrumentName;
    private com.aqitrade.raduga.messagebus.messages.InstrumentDesignator instrumentDesignator;
    private double longMarginRate;
    private double shortMarginRate;
    private double openComissionRate;
    private double closeComissionRate;
    private double price;
    private double openPrice;
    private double closePrice;
    private double highPrice;
    private double lowPrice;
    private double highLimit;
    private double lowLimit;
    private long volume;
    private double amount;
    private double settlementPrice;
    private double bid;
    private double ask;
    private int unitSize;
    private String createDate;
    private double openInterest;
    private double priceTick;
    private String symbol;
    private String currency;
    private double closeTodayComissionRate;
    private double openComissionRateByVolume;
    private double closeComissionRateByVolume;
    private int askVolume;
    private int bidVolume;

    /** Creates a new Builder */
    private Builder() {
      super(InstrumentMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.exchangeID)) {
        this.exchangeID = data().deepCopy(fields()[0].schema(), other.exchangeID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentName)) {
        this.instrumentName = data().deepCopy(fields()[1].schema(), other.instrumentName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instrumentDesignator)) {
        this.instrumentDesignator = data().deepCopy(fields()[2].schema(), other.instrumentDesignator);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longMarginRate)) {
        this.longMarginRate = data().deepCopy(fields()[3].schema(), other.longMarginRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.shortMarginRate)) {
        this.shortMarginRate = data().deepCopy(fields()[4].schema(), other.shortMarginRate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.openComissionRate)) {
        this.openComissionRate = data().deepCopy(fields()[5].schema(), other.openComissionRate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.closeComissionRate)) {
        this.closeComissionRate = data().deepCopy(fields()[6].schema(), other.closeComissionRate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.price)) {
        this.price = data().deepCopy(fields()[7].schema(), other.price);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.openPrice)) {
        this.openPrice = data().deepCopy(fields()[8].schema(), other.openPrice);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.closePrice)) {
        this.closePrice = data().deepCopy(fields()[9].schema(), other.closePrice);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.highPrice)) {
        this.highPrice = data().deepCopy(fields()[10].schema(), other.highPrice);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.lowPrice)) {
        this.lowPrice = data().deepCopy(fields()[11].schema(), other.lowPrice);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.highLimit)) {
        this.highLimit = data().deepCopy(fields()[12].schema(), other.highLimit);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.lowLimit)) {
        this.lowLimit = data().deepCopy(fields()[13].schema(), other.lowLimit);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.volume)) {
        this.volume = data().deepCopy(fields()[14].schema(), other.volume);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.amount)) {
        this.amount = data().deepCopy(fields()[15].schema(), other.amount);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.settlementPrice)) {
        this.settlementPrice = data().deepCopy(fields()[16].schema(), other.settlementPrice);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.bid)) {
        this.bid = data().deepCopy(fields()[17].schema(), other.bid);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.ask)) {
        this.ask = data().deepCopy(fields()[18].schema(), other.ask);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.unitSize)) {
        this.unitSize = data().deepCopy(fields()[19].schema(), other.unitSize);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.createDate)) {
        this.createDate = data().deepCopy(fields()[20].schema(), other.createDate);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.openInterest)) {
        this.openInterest = data().deepCopy(fields()[21].schema(), other.openInterest);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.priceTick)) {
        this.priceTick = data().deepCopy(fields()[22].schema(), other.priceTick);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.symbol)) {
        this.symbol = data().deepCopy(fields()[23].schema(), other.symbol);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.currency)) {
        this.currency = data().deepCopy(fields()[24].schema(), other.currency);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.closeTodayComissionRate)) {
        this.closeTodayComissionRate = data().deepCopy(fields()[25].schema(), other.closeTodayComissionRate);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.openComissionRateByVolume)) {
        this.openComissionRateByVolume = data().deepCopy(fields()[26].schema(), other.openComissionRateByVolume);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.closeComissionRateByVolume)) {
        this.closeComissionRateByVolume = data().deepCopy(fields()[27].schema(), other.closeComissionRateByVolume);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.askVolume)) {
        this.askVolume = data().deepCopy(fields()[28].schema(), other.askVolume);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.bidVolume)) {
        this.bidVolume = data().deepCopy(fields()[29].schema(), other.bidVolume);
        fieldSetFlags()[29] = true;
      }
    }
    
    /** Creates a Builder by copying an existing InstrumentMessage instance */
    private Builder(InstrumentMessage other) {
            super(InstrumentMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.exchangeID)) {
        this.exchangeID = data().deepCopy(fields()[0].schema(), other.exchangeID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentName)) {
        this.instrumentName = data().deepCopy(fields()[1].schema(), other.instrumentName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instrumentDesignator)) {
        this.instrumentDesignator = data().deepCopy(fields()[2].schema(), other.instrumentDesignator);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longMarginRate)) {
        this.longMarginRate = data().deepCopy(fields()[3].schema(), other.longMarginRate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.shortMarginRate)) {
        this.shortMarginRate = data().deepCopy(fields()[4].schema(), other.shortMarginRate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.openComissionRate)) {
        this.openComissionRate = data().deepCopy(fields()[5].schema(), other.openComissionRate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.closeComissionRate)) {
        this.closeComissionRate = data().deepCopy(fields()[6].schema(), other.closeComissionRate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.price)) {
        this.price = data().deepCopy(fields()[7].schema(), other.price);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.openPrice)) {
        this.openPrice = data().deepCopy(fields()[8].schema(), other.openPrice);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.closePrice)) {
        this.closePrice = data().deepCopy(fields()[9].schema(), other.closePrice);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.highPrice)) {
        this.highPrice = data().deepCopy(fields()[10].schema(), other.highPrice);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.lowPrice)) {
        this.lowPrice = data().deepCopy(fields()[11].schema(), other.lowPrice);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.highLimit)) {
        this.highLimit = data().deepCopy(fields()[12].schema(), other.highLimit);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.lowLimit)) {
        this.lowLimit = data().deepCopy(fields()[13].schema(), other.lowLimit);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.volume)) {
        this.volume = data().deepCopy(fields()[14].schema(), other.volume);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.amount)) {
        this.amount = data().deepCopy(fields()[15].schema(), other.amount);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.settlementPrice)) {
        this.settlementPrice = data().deepCopy(fields()[16].schema(), other.settlementPrice);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.bid)) {
        this.bid = data().deepCopy(fields()[17].schema(), other.bid);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.ask)) {
        this.ask = data().deepCopy(fields()[18].schema(), other.ask);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.unitSize)) {
        this.unitSize = data().deepCopy(fields()[19].schema(), other.unitSize);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.createDate)) {
        this.createDate = data().deepCopy(fields()[20].schema(), other.createDate);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.openInterest)) {
        this.openInterest = data().deepCopy(fields()[21].schema(), other.openInterest);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.priceTick)) {
        this.priceTick = data().deepCopy(fields()[22].schema(), other.priceTick);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.symbol)) {
        this.symbol = data().deepCopy(fields()[23].schema(), other.symbol);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.currency)) {
        this.currency = data().deepCopy(fields()[24].schema(), other.currency);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.closeTodayComissionRate)) {
        this.closeTodayComissionRate = data().deepCopy(fields()[25].schema(), other.closeTodayComissionRate);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.openComissionRateByVolume)) {
        this.openComissionRateByVolume = data().deepCopy(fields()[26].schema(), other.openComissionRateByVolume);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.closeComissionRateByVolume)) {
        this.closeComissionRateByVolume = data().deepCopy(fields()[27].schema(), other.closeComissionRateByVolume);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.askVolume)) {
        this.askVolume = data().deepCopy(fields()[28].schema(), other.askVolume);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.bidVolume)) {
        this.bidVolume = data().deepCopy(fields()[29].schema(), other.bidVolume);
        fieldSetFlags()[29] = true;
      }
    }

    /** Gets the value of the 'exchangeID' field */
    public String getExchangeID() {
      return exchangeID;
    }
    
    /** Sets the value of the 'exchangeID' field */
    public Builder setExchangeID(String value) {
      validate(fields()[0], value);
      this.exchangeID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'exchangeID' field has been set */
    public boolean hasExchangeID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'exchangeID' field */
    public Builder clearExchangeID() {
      exchangeID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'instrumentName' field */
    public String getInstrumentName() {
      return instrumentName;
    }
    
    /** Sets the value of the 'instrumentName' field */
    public Builder setInstrumentName(String value) {
      validate(fields()[1], value);
      this.instrumentName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'instrumentName' field has been set */
    public boolean hasInstrumentName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'instrumentName' field */
    public Builder clearInstrumentName() {
      instrumentName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'instrumentDesignator' field */
    public com.aqitrade.raduga.messagebus.messages.InstrumentDesignator getInstrumentDesignator() {
      return instrumentDesignator;
    }
    
    /** Sets the value of the 'instrumentDesignator' field */
    public Builder setInstrumentDesignator(com.aqitrade.raduga.messagebus.messages.InstrumentDesignator value) {
      validate(fields()[2], value);
      this.instrumentDesignator = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'instrumentDesignator' field has been set */
    public boolean hasInstrumentDesignator() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'instrumentDesignator' field */
    public Builder clearInstrumentDesignator() {
      instrumentDesignator = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'longMarginRate' field */
    public Double getLongMarginRate() {
      return longMarginRate;
    }
    
    /** Sets the value of the 'longMarginRate' field */
    public Builder setLongMarginRate(double value) {
      validate(fields()[3], value);
      this.longMarginRate = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'longMarginRate' field has been set */
    public boolean hasLongMarginRate() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'longMarginRate' field */
    public Builder clearLongMarginRate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'shortMarginRate' field */
    public Double getShortMarginRate() {
      return shortMarginRate;
    }
    
    /** Sets the value of the 'shortMarginRate' field */
    public Builder setShortMarginRate(double value) {
      validate(fields()[4], value);
      this.shortMarginRate = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'shortMarginRate' field has been set */
    public boolean hasShortMarginRate() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'shortMarginRate' field */
    public Builder clearShortMarginRate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'openComissionRate' field */
    public Double getOpenComissionRate() {
      return openComissionRate;
    }
    
    /** Sets the value of the 'openComissionRate' field */
    public Builder setOpenComissionRate(double value) {
      validate(fields()[5], value);
      this.openComissionRate = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'openComissionRate' field has been set */
    public boolean hasOpenComissionRate() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'openComissionRate' field */
    public Builder clearOpenComissionRate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'closeComissionRate' field */
    public Double getCloseComissionRate() {
      return closeComissionRate;
    }
    
    /** Sets the value of the 'closeComissionRate' field */
    public Builder setCloseComissionRate(double value) {
      validate(fields()[6], value);
      this.closeComissionRate = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'closeComissionRate' field has been set */
    public boolean hasCloseComissionRate() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'closeComissionRate' field */
    public Builder clearCloseComissionRate() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'price' field */
    public Double getPrice() {
      return price;
    }
    
    /** Sets the value of the 'price' field */
    public Builder setPrice(double value) {
      validate(fields()[7], value);
      this.price = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'price' field has been set */
    public boolean hasPrice() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'price' field */
    public Builder clearPrice() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'openPrice' field */
    public Double getOpenPrice() {
      return openPrice;
    }
    
    /** Sets the value of the 'openPrice' field */
    public Builder setOpenPrice(double value) {
      validate(fields()[8], value);
      this.openPrice = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'openPrice' field has been set */
    public boolean hasOpenPrice() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'openPrice' field */
    public Builder clearOpenPrice() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'closePrice' field */
    public Double getClosePrice() {
      return closePrice;
    }
    
    /** Sets the value of the 'closePrice' field */
    public Builder setClosePrice(double value) {
      validate(fields()[9], value);
      this.closePrice = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'closePrice' field has been set */
    public boolean hasClosePrice() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'closePrice' field */
    public Builder clearClosePrice() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'highPrice' field */
    public Double getHighPrice() {
      return highPrice;
    }
    
    /** Sets the value of the 'highPrice' field */
    public Builder setHighPrice(double value) {
      validate(fields()[10], value);
      this.highPrice = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'highPrice' field has been set */
    public boolean hasHighPrice() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'highPrice' field */
    public Builder clearHighPrice() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'lowPrice' field */
    public Double getLowPrice() {
      return lowPrice;
    }
    
    /** Sets the value of the 'lowPrice' field */
    public Builder setLowPrice(double value) {
      validate(fields()[11], value);
      this.lowPrice = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'lowPrice' field has been set */
    public boolean hasLowPrice() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'lowPrice' field */
    public Builder clearLowPrice() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'highLimit' field */
    public Double getHighLimit() {
      return highLimit;
    }
    
    /** Sets the value of the 'highLimit' field */
    public Builder setHighLimit(double value) {
      validate(fields()[12], value);
      this.highLimit = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'highLimit' field has been set */
    public boolean hasHighLimit() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'highLimit' field */
    public Builder clearHighLimit() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'lowLimit' field */
    public Double getLowLimit() {
      return lowLimit;
    }
    
    /** Sets the value of the 'lowLimit' field */
    public Builder setLowLimit(double value) {
      validate(fields()[13], value);
      this.lowLimit = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'lowLimit' field has been set */
    public boolean hasLowLimit() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'lowLimit' field */
    public Builder clearLowLimit() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'volume' field */
    public Long getVolume() {
      return volume;
    }
    
    /** Sets the value of the 'volume' field */
    public Builder setVolume(long value) {
      validate(fields()[14], value);
      this.volume = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'volume' field has been set */
    public boolean hasVolume() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'volume' field */
    public Builder clearVolume() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'amount' field */
    public Double getAmount() {
      return amount;
    }
    
    /** Sets the value of the 'amount' field */
    public Builder setAmount(double value) {
      validate(fields()[15], value);
      this.amount = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'amount' field has been set */
    public boolean hasAmount() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'amount' field */
    public Builder clearAmount() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'settlementPrice' field */
    public Double getSettlementPrice() {
      return settlementPrice;
    }
    
    /** Sets the value of the 'settlementPrice' field */
    public Builder setSettlementPrice(double value) {
      validate(fields()[16], value);
      this.settlementPrice = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'settlementPrice' field has been set */
    public boolean hasSettlementPrice() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'settlementPrice' field */
    public Builder clearSettlementPrice() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'bid' field */
    public Double getBid() {
      return bid;
    }
    
    /** Sets the value of the 'bid' field */
    public Builder setBid(double value) {
      validate(fields()[17], value);
      this.bid = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'bid' field has been set */
    public boolean hasBid() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'bid' field */
    public Builder clearBid() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'ask' field */
    public Double getAsk() {
      return ask;
    }
    
    /** Sets the value of the 'ask' field */
    public Builder setAsk(double value) {
      validate(fields()[18], value);
      this.ask = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'ask' field has been set */
    public boolean hasAsk() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'ask' field */
    public Builder clearAsk() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'unitSize' field */
    public Integer getUnitSize() {
      return unitSize;
    }
    
    /** Sets the value of the 'unitSize' field */
    public Builder setUnitSize(int value) {
      validate(fields()[19], value);
      this.unitSize = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'unitSize' field has been set */
    public boolean hasUnitSize() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'unitSize' field */
    public Builder clearUnitSize() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'createDate' field */
    public String getCreateDate() {
      return createDate;
    }
    
    /** Sets the value of the 'createDate' field */
    public Builder setCreateDate(String value) {
      validate(fields()[20], value);
      this.createDate = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'createDate' field has been set */
    public boolean hasCreateDate() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'createDate' field */
    public Builder clearCreateDate() {
      createDate = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'openInterest' field */
    public Double getOpenInterest() {
      return openInterest;
    }
    
    /** Sets the value of the 'openInterest' field */
    public Builder setOpenInterest(double value) {
      validate(fields()[21], value);
      this.openInterest = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'openInterest' field has been set */
    public boolean hasOpenInterest() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'openInterest' field */
    public Builder clearOpenInterest() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'priceTick' field */
    public Double getPriceTick() {
      return priceTick;
    }
    
    /** Sets the value of the 'priceTick' field */
    public Builder setPriceTick(double value) {
      validate(fields()[22], value);
      this.priceTick = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'priceTick' field has been set */
    public boolean hasPriceTick() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'priceTick' field */
    public Builder clearPriceTick() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'symbol' field */
    public String getSymbol() {
      return symbol;
    }
    
    /** Sets the value of the 'symbol' field */
    public Builder setSymbol(String value) {
      validate(fields()[23], value);
      this.symbol = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'symbol' field has been set */
    public boolean hasSymbol() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'symbol' field */
    public Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'currency' field */
    public String getCurrency() {
      return currency;
    }
    
    /** Sets the value of the 'currency' field */
    public Builder setCurrency(String value) {
      validate(fields()[24], value);
      this.currency = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'currency' field has been set */
    public boolean hasCurrency() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'currency' field */
    public Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /** Gets the value of the 'closeTodayComissionRate' field */
    public Double getCloseTodayComissionRate() {
      return closeTodayComissionRate;
    }
    
    /** Sets the value of the 'closeTodayComissionRate' field */
    public Builder setCloseTodayComissionRate(double value) {
      validate(fields()[25], value);
      this.closeTodayComissionRate = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'closeTodayComissionRate' field has been set */
    public boolean hasCloseTodayComissionRate() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'closeTodayComissionRate' field */
    public Builder clearCloseTodayComissionRate() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /** Gets the value of the 'openComissionRateByVolume' field */
    public Double getOpenComissionRateByVolume() {
      return openComissionRateByVolume;
    }
    
    /** Sets the value of the 'openComissionRateByVolume' field */
    public Builder setOpenComissionRateByVolume(double value) {
      validate(fields()[26], value);
      this.openComissionRateByVolume = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'openComissionRateByVolume' field has been set */
    public boolean hasOpenComissionRateByVolume() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'openComissionRateByVolume' field */
    public Builder clearOpenComissionRateByVolume() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /** Gets the value of the 'closeComissionRateByVolume' field */
    public Double getCloseComissionRateByVolume() {
      return closeComissionRateByVolume;
    }
    
    /** Sets the value of the 'closeComissionRateByVolume' field */
    public Builder setCloseComissionRateByVolume(double value) {
      validate(fields()[27], value);
      this.closeComissionRateByVolume = value;
      fieldSetFlags()[27] = true;
      return this; 
    }
    
    /** Checks whether the 'closeComissionRateByVolume' field has been set */
    public boolean hasCloseComissionRateByVolume() {
      return fieldSetFlags()[27];
    }
    
    /** Clears the value of the 'closeComissionRateByVolume' field */
    public Builder clearCloseComissionRateByVolume() {
      fieldSetFlags()[27] = false;
      return this;
    }

    /** Gets the value of the 'askVolume' field */
    public Integer getAskVolume() {
      return askVolume;
    }
    
    /** Sets the value of the 'askVolume' field */
    public Builder setAskVolume(int value) {
      validate(fields()[28], value);
      this.askVolume = value;
      fieldSetFlags()[28] = true;
      return this; 
    }
    
    /** Checks whether the 'askVolume' field has been set */
    public boolean hasAskVolume() {
      return fieldSetFlags()[28];
    }
    
    /** Clears the value of the 'askVolume' field */
    public Builder clearAskVolume() {
      fieldSetFlags()[28] = false;
      return this;
    }

    /** Gets the value of the 'bidVolume' field */
    public Integer getBidVolume() {
      return bidVolume;
    }
    
    /** Sets the value of the 'bidVolume' field */
    public Builder setBidVolume(int value) {
      validate(fields()[29], value);
      this.bidVolume = value;
      fieldSetFlags()[29] = true;
      return this; 
    }
    
    /** Checks whether the 'bidVolume' field has been set */
    public boolean hasBidVolume() {
      return fieldSetFlags()[29];
    }
    
    /** Clears the value of the 'bidVolume' field */
    public Builder clearBidVolume() {
      fieldSetFlags()[29] = false;
      return this;
    }

    @Override
    public InstrumentMessage build() {
      try {
        InstrumentMessage record = new InstrumentMessage();
        record.exchangeID = fieldSetFlags()[0] ? this.exchangeID : (String) defaultValue(fields()[0]);
        record.instrumentName = fieldSetFlags()[1] ? this.instrumentName : (String) defaultValue(fields()[1]);
        record.instrumentDesignator = fieldSetFlags()[2] ? this.instrumentDesignator : (com.aqitrade.raduga.messagebus.messages.InstrumentDesignator) defaultValue(fields()[2]);
        record.longMarginRate = fieldSetFlags()[3] ? this.longMarginRate : (Double) defaultValue(fields()[3]);
        record.shortMarginRate = fieldSetFlags()[4] ? this.shortMarginRate : (Double) defaultValue(fields()[4]);
        record.openComissionRate = fieldSetFlags()[5] ? this.openComissionRate : (Double) defaultValue(fields()[5]);
        record.closeComissionRate = fieldSetFlags()[6] ? this.closeComissionRate : (Double) defaultValue(fields()[6]);
        record.price = fieldSetFlags()[7] ? this.price : (Double) defaultValue(fields()[7]);
        record.openPrice = fieldSetFlags()[8] ? this.openPrice : (Double) defaultValue(fields()[8]);
        record.closePrice = fieldSetFlags()[9] ? this.closePrice : (Double) defaultValue(fields()[9]);
        record.highPrice = fieldSetFlags()[10] ? this.highPrice : (Double) defaultValue(fields()[10]);
        record.lowPrice = fieldSetFlags()[11] ? this.lowPrice : (Double) defaultValue(fields()[11]);
        record.highLimit = fieldSetFlags()[12] ? this.highLimit : (Double) defaultValue(fields()[12]);
        record.lowLimit = fieldSetFlags()[13] ? this.lowLimit : (Double) defaultValue(fields()[13]);
        record.volume = fieldSetFlags()[14] ? this.volume : (Long) defaultValue(fields()[14]);
        record.amount = fieldSetFlags()[15] ? this.amount : (Double) defaultValue(fields()[15]);
        record.settlementPrice = fieldSetFlags()[16] ? this.settlementPrice : (Double) defaultValue(fields()[16]);
        record.bid = fieldSetFlags()[17] ? this.bid : (Double) defaultValue(fields()[17]);
        record.ask = fieldSetFlags()[18] ? this.ask : (Double) defaultValue(fields()[18]);
        record.unitSize = fieldSetFlags()[19] ? this.unitSize : (Integer) defaultValue(fields()[19]);
        record.createDate = fieldSetFlags()[20] ? this.createDate : (String) defaultValue(fields()[20]);
        record.openInterest = fieldSetFlags()[21] ? this.openInterest : (Double) defaultValue(fields()[21]);
        record.priceTick = fieldSetFlags()[22] ? this.priceTick : (Double) defaultValue(fields()[22]);
        record.symbol = fieldSetFlags()[23] ? this.symbol : (String) defaultValue(fields()[23]);
        record.currency = fieldSetFlags()[24] ? this.currency : (String) defaultValue(fields()[24]);
        record.closeTodayComissionRate = fieldSetFlags()[25] ? this.closeTodayComissionRate : (Double) defaultValue(fields()[25]);
        record.openComissionRateByVolume = fieldSetFlags()[26] ? this.openComissionRateByVolume : (Double) defaultValue(fields()[26]);
        record.closeComissionRateByVolume = fieldSetFlags()[27] ? this.closeComissionRateByVolume : (Double) defaultValue(fields()[27]);
        record.askVolume = fieldSetFlags()[28] ? this.askVolume : (Integer) defaultValue(fields()[28]);
        record.bidVolume = fieldSetFlags()[29] ? this.bidVolume : (Integer) defaultValue(fields()[29]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
