/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AccountMarginCommissionStatusMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountMarginCommissionStatusMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"brokerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountID\",\"type\":\"long\"},{\"name\":\"accountAuthId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"marginRatioType\",\"type\":{\"type\":\"enum\",\"name\":\"MarginType\",\"symbols\":[\"margin_by_volume\",\"margin_by_money\"]}},{\"name\":\"commissionRatioType\",\"type\":{\"type\":\"enum\",\"name\":\"CommissionType\",\"symbols\":[\"commission_by_volume\",\"commission_by_money\"]}},{\"name\":\"longMarginRatio\",\"type\":\"double\"},{\"name\":\"shortMarginRatio\",\"type\":\"double\"},{\"name\":\"openRatio\",\"type\":\"double\"},{\"name\":\"closeRatio\",\"type\":\"double\"},{\"name\":\"closeTodayRatio\",\"type\":\"double\"},{\"name\":\"maxLimitOrderVolume\",\"type\":\"long\"},{\"name\":\"minLimitOrderVolume\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String brokerId;
  @Deprecated public long accountID;
  @Deprecated public String accountAuthId;
  @Deprecated public String symbol;
  @Deprecated public MarginType marginRatioType;
  @Deprecated public CommissionType commissionRatioType;
  @Deprecated public double longMarginRatio;
  @Deprecated public double shortMarginRatio;
  @Deprecated public double openRatio;
  @Deprecated public double closeRatio;
  @Deprecated public double closeTodayRatio;
  @Deprecated public long maxLimitOrderVolume;
  @Deprecated public long minLimitOrderVolume;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public AccountMarginCommissionStatusMessage() {}

  /**
   * All-args constructor.
   */
  public AccountMarginCommissionStatusMessage(String brokerId, Long accountID, String accountAuthId, String symbol, MarginType marginRatioType, CommissionType commissionRatioType, Double longMarginRatio, Double shortMarginRatio, Double openRatio, Double closeRatio, Double closeTodayRatio, Long maxLimitOrderVolume, Long minLimitOrderVolume) {
    this.brokerId = brokerId;
    this.accountID = accountID;
    this.accountAuthId = accountAuthId;
    this.symbol = symbol;
    this.marginRatioType = marginRatioType;
    this.commissionRatioType = commissionRatioType;
    this.longMarginRatio = longMarginRatio;
    this.shortMarginRatio = shortMarginRatio;
    this.openRatio = openRatio;
    this.closeRatio = closeRatio;
    this.closeTodayRatio = closeTodayRatio;
    this.maxLimitOrderVolume = maxLimitOrderVolume;
    this.minLimitOrderVolume = minLimitOrderVolume;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return brokerId;
    case 1: return accountID;
    case 2: return accountAuthId;
    case 3: return symbol;
    case 4: return marginRatioType;
    case 5: return commissionRatioType;
    case 6: return longMarginRatio;
    case 7: return shortMarginRatio;
    case 8: return openRatio;
    case 9: return closeRatio;
    case 10: return closeTodayRatio;
    case 11: return maxLimitOrderVolume;
    case 12: return minLimitOrderVolume;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: brokerId = (String)value$; break;
    case 1: accountID = (Long)value$; break;
    case 2: accountAuthId = (String)value$; break;
    case 3: symbol = (String)value$; break;
    case 4: marginRatioType = (MarginType)value$; break;
    case 5: commissionRatioType = (CommissionType)value$; break;
    case 6: longMarginRatio = (Double)value$; break;
    case 7: shortMarginRatio = (Double)value$; break;
    case 8: openRatio = (Double)value$; break;
    case 9: closeRatio = (Double)value$; break;
    case 10: closeTodayRatio = (Double)value$; break;
    case 11: maxLimitOrderVolume = (Long)value$; break;
    case 12: minLimitOrderVolume = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'brokerId' field.
   */
  public String getBrokerId() {
    return brokerId;
  }

  /**
   * Sets the value of the 'brokerId' field.
   * @param value the value to set.
   */
  public void setBrokerId(String value) {
    this.brokerId = value;
  }

  /**
   * Gets the value of the 'accountID' field.
   */
  public Long getAccountID() {
    return accountID;
  }

  /**
   * Sets the value of the 'accountID' field.
   * @param value the value to set.
   */
  public void setAccountID(Long value) {
    this.accountID = value;
  }

  /**
   * Gets the value of the 'accountAuthId' field.
   */
  public String getAccountAuthId() {
    return accountAuthId;
  }

  /**
   * Sets the value of the 'accountAuthId' field.
   * @param value the value to set.
   */
  public void setAccountAuthId(String value) {
    this.accountAuthId = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   */
  public String getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'marginRatioType' field.
   */
  public MarginType getMarginRatioType() {
    return marginRatioType;
  }

  /**
   * Sets the value of the 'marginRatioType' field.
   * @param value the value to set.
   */
  public void setMarginRatioType(MarginType value) {
    this.marginRatioType = value;
  }

  /**
   * Gets the value of the 'commissionRatioType' field.
   */
  public CommissionType getCommissionRatioType() {
    return commissionRatioType;
  }

  /**
   * Sets the value of the 'commissionRatioType' field.
   * @param value the value to set.
   */
  public void setCommissionRatioType(CommissionType value) {
    this.commissionRatioType = value;
  }

  /**
   * Gets the value of the 'longMarginRatio' field.
   */
  public Double getLongMarginRatio() {
    return longMarginRatio;
  }

  /**
   * Sets the value of the 'longMarginRatio' field.
   * @param value the value to set.
   */
  public void setLongMarginRatio(Double value) {
    this.longMarginRatio = value;
  }

  /**
   * Gets the value of the 'shortMarginRatio' field.
   */
  public Double getShortMarginRatio() {
    return shortMarginRatio;
  }

  /**
   * Sets the value of the 'shortMarginRatio' field.
   * @param value the value to set.
   */
  public void setShortMarginRatio(Double value) {
    this.shortMarginRatio = value;
  }

  /**
   * Gets the value of the 'openRatio' field.
   */
  public Double getOpenRatio() {
    return openRatio;
  }

  /**
   * Sets the value of the 'openRatio' field.
   * @param value the value to set.
   */
  public void setOpenRatio(Double value) {
    this.openRatio = value;
  }

  /**
   * Gets the value of the 'closeRatio' field.
   */
  public Double getCloseRatio() {
    return closeRatio;
  }

  /**
   * Sets the value of the 'closeRatio' field.
   * @param value the value to set.
   */
  public void setCloseRatio(Double value) {
    this.closeRatio = value;
  }

  /**
   * Gets the value of the 'closeTodayRatio' field.
   */
  public Double getCloseTodayRatio() {
    return closeTodayRatio;
  }

  /**
   * Sets the value of the 'closeTodayRatio' field.
   * @param value the value to set.
   */
  public void setCloseTodayRatio(Double value) {
    this.closeTodayRatio = value;
  }

  /**
   * Gets the value of the 'maxLimitOrderVolume' field.
   */
  public Long getMaxLimitOrderVolume() {
    return maxLimitOrderVolume;
  }

  /**
   * Sets the value of the 'maxLimitOrderVolume' field.
   * @param value the value to set.
   */
  public void setMaxLimitOrderVolume(Long value) {
    this.maxLimitOrderVolume = value;
  }

  /**
   * Gets the value of the 'minLimitOrderVolume' field.
   */
  public Long getMinLimitOrderVolume() {
    return minLimitOrderVolume;
  }

  /**
   * Sets the value of the 'minLimitOrderVolume' field.
   * @param value the value to set.
   */
  public void setMinLimitOrderVolume(Long value) {
    this.minLimitOrderVolume = value;
  }

  /** Creates a new AccountMarginCommissionStatusMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new AccountMarginCommissionStatusMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new AccountMarginCommissionStatusMessage RecordBuilder by copying an existing AccountMarginCommissionStatusMessage instance */
  public static Builder newBuilder(AccountMarginCommissionStatusMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for AccountMarginCommissionStatusMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountMarginCommissionStatusMessage>
    implements org.apache.avro.data.RecordBuilder<AccountMarginCommissionStatusMessage> {

    private String brokerId;
    private long accountID;
    private String accountAuthId;
    private String symbol;
    private MarginType marginRatioType;
    private CommissionType commissionRatioType;
    private double longMarginRatio;
    private double shortMarginRatio;
    private double openRatio;
    private double closeRatio;
    private double closeTodayRatio;
    private long maxLimitOrderVolume;
    private long minLimitOrderVolume;

    /** Creates a new Builder */
    private Builder() {
      super(AccountMarginCommissionStatusMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[0].schema(), other.brokerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountID)) {
        this.accountID = data().deepCopy(fields()[1].schema(), other.accountID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountAuthId)) {
        this.accountAuthId = data().deepCopy(fields()[2].schema(), other.accountAuthId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.symbol)) {
        this.symbol = data().deepCopy(fields()[3].schema(), other.symbol);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.marginRatioType)) {
        this.marginRatioType = data().deepCopy(fields()[4].schema(), other.marginRatioType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.commissionRatioType)) {
        this.commissionRatioType = data().deepCopy(fields()[5].schema(), other.commissionRatioType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.longMarginRatio)) {
        this.longMarginRatio = data().deepCopy(fields()[6].schema(), other.longMarginRatio);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.shortMarginRatio)) {
        this.shortMarginRatio = data().deepCopy(fields()[7].schema(), other.shortMarginRatio);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.openRatio)) {
        this.openRatio = data().deepCopy(fields()[8].schema(), other.openRatio);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.closeRatio)) {
        this.closeRatio = data().deepCopy(fields()[9].schema(), other.closeRatio);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.closeTodayRatio)) {
        this.closeTodayRatio = data().deepCopy(fields()[10].schema(), other.closeTodayRatio);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.maxLimitOrderVolume)) {
        this.maxLimitOrderVolume = data().deepCopy(fields()[11].schema(), other.maxLimitOrderVolume);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.minLimitOrderVolume)) {
        this.minLimitOrderVolume = data().deepCopy(fields()[12].schema(), other.minLimitOrderVolume);
        fieldSetFlags()[12] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AccountMarginCommissionStatusMessage instance */
    private Builder(AccountMarginCommissionStatusMessage other) {
            super(AccountMarginCommissionStatusMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[0].schema(), other.brokerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountID)) {
        this.accountID = data().deepCopy(fields()[1].schema(), other.accountID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountAuthId)) {
        this.accountAuthId = data().deepCopy(fields()[2].schema(), other.accountAuthId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.symbol)) {
        this.symbol = data().deepCopy(fields()[3].schema(), other.symbol);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.marginRatioType)) {
        this.marginRatioType = data().deepCopy(fields()[4].schema(), other.marginRatioType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.commissionRatioType)) {
        this.commissionRatioType = data().deepCopy(fields()[5].schema(), other.commissionRatioType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.longMarginRatio)) {
        this.longMarginRatio = data().deepCopy(fields()[6].schema(), other.longMarginRatio);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.shortMarginRatio)) {
        this.shortMarginRatio = data().deepCopy(fields()[7].schema(), other.shortMarginRatio);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.openRatio)) {
        this.openRatio = data().deepCopy(fields()[8].schema(), other.openRatio);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.closeRatio)) {
        this.closeRatio = data().deepCopy(fields()[9].schema(), other.closeRatio);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.closeTodayRatio)) {
        this.closeTodayRatio = data().deepCopy(fields()[10].schema(), other.closeTodayRatio);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.maxLimitOrderVolume)) {
        this.maxLimitOrderVolume = data().deepCopy(fields()[11].schema(), other.maxLimitOrderVolume);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.minLimitOrderVolume)) {
        this.minLimitOrderVolume = data().deepCopy(fields()[12].schema(), other.minLimitOrderVolume);
        fieldSetFlags()[12] = true;
      }
    }

    /** Gets the value of the 'brokerId' field */
    public String getBrokerId() {
      return brokerId;
    }
    
    /** Sets the value of the 'brokerId' field */
    public Builder setBrokerId(String value) {
      validate(fields()[0], value);
      this.brokerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'brokerId' field has been set */
    public boolean hasBrokerId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'brokerId' field */
    public Builder clearBrokerId() {
      brokerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'accountID' field */
    public Long getAccountID() {
      return accountID;
    }
    
    /** Sets the value of the 'accountID' field */
    public Builder setAccountID(long value) {
      validate(fields()[1], value);
      this.accountID = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'accountID' field has been set */
    public boolean hasAccountID() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'accountID' field */
    public Builder clearAccountID() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'accountAuthId' field */
    public String getAccountAuthId() {
      return accountAuthId;
    }
    
    /** Sets the value of the 'accountAuthId' field */
    public Builder setAccountAuthId(String value) {
      validate(fields()[2], value);
      this.accountAuthId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'accountAuthId' field has been set */
    public boolean hasAccountAuthId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'accountAuthId' field */
    public Builder clearAccountAuthId() {
      accountAuthId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'symbol' field */
    public String getSymbol() {
      return symbol;
    }
    
    /** Sets the value of the 'symbol' field */
    public Builder setSymbol(String value) {
      validate(fields()[3], value);
      this.symbol = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'symbol' field has been set */
    public boolean hasSymbol() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'symbol' field */
    public Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'marginRatioType' field */
    public MarginType getMarginRatioType() {
      return marginRatioType;
    }
    
    /** Sets the value of the 'marginRatioType' field */
    public Builder setMarginRatioType(MarginType value) {
      validate(fields()[4], value);
      this.marginRatioType = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'marginRatioType' field has been set */
    public boolean hasMarginRatioType() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'marginRatioType' field */
    public Builder clearMarginRatioType() {
      marginRatioType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'commissionRatioType' field */
    public CommissionType getCommissionRatioType() {
      return commissionRatioType;
    }
    
    /** Sets the value of the 'commissionRatioType' field */
    public Builder setCommissionRatioType(CommissionType value) {
      validate(fields()[5], value);
      this.commissionRatioType = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'commissionRatioType' field has been set */
    public boolean hasCommissionRatioType() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'commissionRatioType' field */
    public Builder clearCommissionRatioType() {
      commissionRatioType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'longMarginRatio' field */
    public Double getLongMarginRatio() {
      return longMarginRatio;
    }
    
    /** Sets the value of the 'longMarginRatio' field */
    public Builder setLongMarginRatio(double value) {
      validate(fields()[6], value);
      this.longMarginRatio = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'longMarginRatio' field has been set */
    public boolean hasLongMarginRatio() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'longMarginRatio' field */
    public Builder clearLongMarginRatio() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'shortMarginRatio' field */
    public Double getShortMarginRatio() {
      return shortMarginRatio;
    }
    
    /** Sets the value of the 'shortMarginRatio' field */
    public Builder setShortMarginRatio(double value) {
      validate(fields()[7], value);
      this.shortMarginRatio = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'shortMarginRatio' field has been set */
    public boolean hasShortMarginRatio() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'shortMarginRatio' field */
    public Builder clearShortMarginRatio() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'openRatio' field */
    public Double getOpenRatio() {
      return openRatio;
    }
    
    /** Sets the value of the 'openRatio' field */
    public Builder setOpenRatio(double value) {
      validate(fields()[8], value);
      this.openRatio = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'openRatio' field has been set */
    public boolean hasOpenRatio() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'openRatio' field */
    public Builder clearOpenRatio() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'closeRatio' field */
    public Double getCloseRatio() {
      return closeRatio;
    }
    
    /** Sets the value of the 'closeRatio' field */
    public Builder setCloseRatio(double value) {
      validate(fields()[9], value);
      this.closeRatio = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'closeRatio' field has been set */
    public boolean hasCloseRatio() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'closeRatio' field */
    public Builder clearCloseRatio() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'closeTodayRatio' field */
    public Double getCloseTodayRatio() {
      return closeTodayRatio;
    }
    
    /** Sets the value of the 'closeTodayRatio' field */
    public Builder setCloseTodayRatio(double value) {
      validate(fields()[10], value);
      this.closeTodayRatio = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'closeTodayRatio' field has been set */
    public boolean hasCloseTodayRatio() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'closeTodayRatio' field */
    public Builder clearCloseTodayRatio() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'maxLimitOrderVolume' field */
    public Long getMaxLimitOrderVolume() {
      return maxLimitOrderVolume;
    }
    
    /** Sets the value of the 'maxLimitOrderVolume' field */
    public Builder setMaxLimitOrderVolume(long value) {
      validate(fields()[11], value);
      this.maxLimitOrderVolume = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'maxLimitOrderVolume' field has been set */
    public boolean hasMaxLimitOrderVolume() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'maxLimitOrderVolume' field */
    public Builder clearMaxLimitOrderVolume() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'minLimitOrderVolume' field */
    public Long getMinLimitOrderVolume() {
      return minLimitOrderVolume;
    }
    
    /** Sets the value of the 'minLimitOrderVolume' field */
    public Builder setMinLimitOrderVolume(long value) {
      validate(fields()[12], value);
      this.minLimitOrderVolume = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'minLimitOrderVolume' field has been set */
    public boolean hasMinLimitOrderVolume() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'minLimitOrderVolume' field */
    public Builder clearMinLimitOrderVolume() {
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    public AccountMarginCommissionStatusMessage build() {
      try {
        AccountMarginCommissionStatusMessage record = new AccountMarginCommissionStatusMessage();
        record.brokerId = fieldSetFlags()[0] ? this.brokerId : (String) defaultValue(fields()[0]);
        record.accountID = fieldSetFlags()[1] ? this.accountID : (Long) defaultValue(fields()[1]);
        record.accountAuthId = fieldSetFlags()[2] ? this.accountAuthId : (String) defaultValue(fields()[2]);
        record.symbol = fieldSetFlags()[3] ? this.symbol : (String) defaultValue(fields()[3]);
        record.marginRatioType = fieldSetFlags()[4] ? this.marginRatioType : (MarginType) defaultValue(fields()[4]);
        record.commissionRatioType = fieldSetFlags()[5] ? this.commissionRatioType : (CommissionType) defaultValue(fields()[5]);
        record.longMarginRatio = fieldSetFlags()[6] ? this.longMarginRatio : (Double) defaultValue(fields()[6]);
        record.shortMarginRatio = fieldSetFlags()[7] ? this.shortMarginRatio : (Double) defaultValue(fields()[7]);
        record.openRatio = fieldSetFlags()[8] ? this.openRatio : (Double) defaultValue(fields()[8]);
        record.closeRatio = fieldSetFlags()[9] ? this.closeRatio : (Double) defaultValue(fields()[9]);
        record.closeTodayRatio = fieldSetFlags()[10] ? this.closeTodayRatio : (Double) defaultValue(fields()[10]);
        record.maxLimitOrderVolume = fieldSetFlags()[11] ? this.maxLimitOrderVolume : (Long) defaultValue(fields()[11]);
        record.minLimitOrderVolume = fieldSetFlags()[12] ? this.minLimitOrderVolume : (Long) defaultValue(fields()[12]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
