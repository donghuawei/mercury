/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ContractBank extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContractBank\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"bankID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankBrchID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String bankID;
  @Deprecated public String bankBrchID;
  @Deprecated public String bankName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public ContractBank() {}

  /**
   * All-args constructor.
   */
  public ContractBank(String bankID, String bankBrchID, String bankName) {
    this.bankID = bankID;
    this.bankBrchID = bankBrchID;
    this.bankName = bankName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return bankID;
    case 1: return bankBrchID;
    case 2: return bankName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: bankID = (String)value$; break;
    case 1: bankBrchID = (String)value$; break;
    case 2: bankName = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'bankID' field.
   */
  public String getBankID() {
    return bankID;
  }

  /**
   * Sets the value of the 'bankID' field.
   * @param value the value to set.
   */
  public void setBankID(String value) {
    this.bankID = value;
  }

  /**
   * Gets the value of the 'bankBrchID' field.
   */
  public String getBankBrchID() {
    return bankBrchID;
  }

  /**
   * Sets the value of the 'bankBrchID' field.
   * @param value the value to set.
   */
  public void setBankBrchID(String value) {
    this.bankBrchID = value;
  }

  /**
   * Gets the value of the 'bankName' field.
   */
  public String getBankName() {
    return bankName;
  }

  /**
   * Sets the value of the 'bankName' field.
   * @param value the value to set.
   */
  public void setBankName(String value) {
    this.bankName = value;
  }

  /** Creates a new ContractBank RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new ContractBank RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new ContractBank RecordBuilder by copying an existing ContractBank instance */
  public static Builder newBuilder(ContractBank other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for ContractBank instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContractBank>
    implements org.apache.avro.data.RecordBuilder<ContractBank> {

    private String bankID;
    private String bankBrchID;
    private String bankName;

    /** Creates a new Builder */
    private Builder() {
      super(ContractBank.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bankID)) {
        this.bankID = data().deepCopy(fields()[0].schema(), other.bankID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bankBrchID)) {
        this.bankBrchID = data().deepCopy(fields()[1].schema(), other.bankBrchID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bankName)) {
        this.bankName = data().deepCopy(fields()[2].schema(), other.bankName);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ContractBank instance */
    private Builder(ContractBank other) {
            super(ContractBank.SCHEMA$);
      if (isValidValue(fields()[0], other.bankID)) {
        this.bankID = data().deepCopy(fields()[0].schema(), other.bankID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bankBrchID)) {
        this.bankBrchID = data().deepCopy(fields()[1].schema(), other.bankBrchID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bankName)) {
        this.bankName = data().deepCopy(fields()[2].schema(), other.bankName);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'bankID' field */
    public String getBankID() {
      return bankID;
    }
    
    /** Sets the value of the 'bankID' field */
    public Builder setBankID(String value) {
      validate(fields()[0], value);
      this.bankID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'bankID' field has been set */
    public boolean hasBankID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'bankID' field */
    public Builder clearBankID() {
      bankID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'bankBrchID' field */
    public String getBankBrchID() {
      return bankBrchID;
    }
    
    /** Sets the value of the 'bankBrchID' field */
    public Builder setBankBrchID(String value) {
      validate(fields()[1], value);
      this.bankBrchID = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'bankBrchID' field has been set */
    public boolean hasBankBrchID() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'bankBrchID' field */
    public Builder clearBankBrchID() {
      bankBrchID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'bankName' field */
    public String getBankName() {
      return bankName;
    }
    
    /** Sets the value of the 'bankName' field */
    public Builder setBankName(String value) {
      validate(fields()[2], value);
      this.bankName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'bankName' field has been set */
    public boolean hasBankName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'bankName' field */
    public Builder clearBankName() {
      bankName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ContractBank build() {
      try {
        ContractBank record = new ContractBank();
        record.bankID = fieldSetFlags()[0] ? this.bankID : (String) defaultValue(fields()[0]);
        record.bankBrchID = fieldSetFlags()[1] ? this.bankBrchID : (String) defaultValue(fields()[1]);
        record.bankName = fieldSetFlags()[2] ? this.bankName : (String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
