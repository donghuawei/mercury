/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransferSerialMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransferSerialMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"accountID\",\"type\":\"long\"},{\"name\":\"brokerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"TransferSerials\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TransferSerial\",\"fields\":[{\"name\":\"plateSerial\",\"type\":\"int\"},{\"name\":\"bankSerial\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"futureSerial\",\"type\":\"int\"},{\"name\":\"errorID\",\"type\":\"long\"},{\"name\":\"tradeTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankBranchID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankAccount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tradeCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tradeAmount\",\"type\":\"double\"},{\"name\":\"currencyID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"availabilityFlag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long accountID;
  @Deprecated public String brokerId;
  @Deprecated public String createDate;
  @Deprecated public java.util.List<TransferSerial> TransferSerials;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public TransferSerialMessage() {}

  /**
   * All-args constructor.
   */
  public TransferSerialMessage(Long accountID, String brokerId, String createDate, java.util.List<TransferSerial> TransferSerials) {
    this.accountID = accountID;
    this.brokerId = brokerId;
    this.createDate = createDate;
    this.TransferSerials = TransferSerials;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return accountID;
    case 1: return brokerId;
    case 2: return createDate;
    case 3: return TransferSerials;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: accountID = (Long)value$; break;
    case 1: brokerId = (String)value$; break;
    case 2: createDate = (String)value$; break;
    case 3: TransferSerials = (java.util.List<TransferSerial>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accountID' field.
   */
  public Long getAccountID() {
    return accountID;
  }

  /**
   * Sets the value of the 'accountID' field.
   * @param value the value to set.
   */
  public void setAccountID(Long value) {
    this.accountID = value;
  }

  /**
   * Gets the value of the 'brokerId' field.
   */
  public String getBrokerId() {
    return brokerId;
  }

  /**
   * Sets the value of the 'brokerId' field.
   * @param value the value to set.
   */
  public void setBrokerId(String value) {
    this.brokerId = value;
  }

  /**
   * Gets the value of the 'createDate' field.
   */
  public String getCreateDate() {
    return createDate;
  }

  /**
   * Sets the value of the 'createDate' field.
   * @param value the value to set.
   */
  public void setCreateDate(String value) {
    this.createDate = value;
  }

  /**
   * Gets the value of the 'TransferSerials' field.
   */
  public java.util.List<TransferSerial> getTransferSerials() {
    return TransferSerials;
  }

  /**
   * Sets the value of the 'TransferSerials' field.
   * @param value the value to set.
   */
  public void setTransferSerials(java.util.List<TransferSerial> value) {
    this.TransferSerials = value;
  }

  /** Creates a new TransferSerialMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new TransferSerialMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new TransferSerialMessage RecordBuilder by copying an existing TransferSerialMessage instance */
  public static Builder newBuilder(TransferSerialMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for TransferSerialMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransferSerialMessage>
    implements org.apache.avro.data.RecordBuilder<TransferSerialMessage> {

    private long accountID;
    private String brokerId;
    private String createDate;
    private java.util.List<TransferSerial> TransferSerials;

    /** Creates a new Builder */
    private Builder() {
      super(TransferSerialMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountID)) {
        this.accountID = data().deepCopy(fields()[0].schema(), other.accountID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[1].schema(), other.brokerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.createDate)) {
        this.createDate = data().deepCopy(fields()[2].schema(), other.createDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TransferSerials)) {
        this.TransferSerials = data().deepCopy(fields()[3].schema(), other.TransferSerials);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TransferSerialMessage instance */
    private Builder(TransferSerialMessage other) {
            super(TransferSerialMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.accountID)) {
        this.accountID = data().deepCopy(fields()[0].schema(), other.accountID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[1].schema(), other.brokerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.createDate)) {
        this.createDate = data().deepCopy(fields()[2].schema(), other.createDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TransferSerials)) {
        this.TransferSerials = data().deepCopy(fields()[3].schema(), other.TransferSerials);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'accountID' field */
    public Long getAccountID() {
      return accountID;
    }
    
    /** Sets the value of the 'accountID' field */
    public Builder setAccountID(long value) {
      validate(fields()[0], value);
      this.accountID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'accountID' field has been set */
    public boolean hasAccountID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'accountID' field */
    public Builder clearAccountID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'brokerId' field */
    public String getBrokerId() {
      return brokerId;
    }
    
    /** Sets the value of the 'brokerId' field */
    public Builder setBrokerId(String value) {
      validate(fields()[1], value);
      this.brokerId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'brokerId' field has been set */
    public boolean hasBrokerId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'brokerId' field */
    public Builder clearBrokerId() {
      brokerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'createDate' field */
    public String getCreateDate() {
      return createDate;
    }
    
    /** Sets the value of the 'createDate' field */
    public Builder setCreateDate(String value) {
      validate(fields()[2], value);
      this.createDate = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'createDate' field has been set */
    public boolean hasCreateDate() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'createDate' field */
    public Builder clearCreateDate() {
      createDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'TransferSerials' field */
    public java.util.List<TransferSerial> getTransferSerials() {
      return TransferSerials;
    }
    
    /** Sets the value of the 'TransferSerials' field */
    public Builder setTransferSerials(java.util.List<TransferSerial> value) {
      validate(fields()[3], value);
      this.TransferSerials = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'TransferSerials' field has been set */
    public boolean hasTransferSerials() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'TransferSerials' field */
    public Builder clearTransferSerials() {
      TransferSerials = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public TransferSerialMessage build() {
      try {
        TransferSerialMessage record = new TransferSerialMessage();
        record.accountID = fieldSetFlags()[0] ? this.accountID : (Long) defaultValue(fields()[0]);
        record.brokerId = fieldSetFlags()[1] ? this.brokerId : (String) defaultValue(fields()[1]);
        record.createDate = fieldSetFlags()[2] ? this.createDate : (String) defaultValue(fields()[2]);
        record.TransferSerials = fieldSetFlags()[3] ? this.TransferSerials : (java.util.List<TransferSerial>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
