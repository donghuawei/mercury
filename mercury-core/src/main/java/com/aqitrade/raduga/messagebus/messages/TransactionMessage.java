/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransactionMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"transactionID\",\"type\":\"long\"},{\"name\":\"createDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"qty\",\"type\":\"double\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionDirection\",\"symbols\":[\"transaction_direction_long\",\"transaction_direction_short\"]}},{\"name\":\"portfolioID\",\"type\":\"long\"},{\"name\":\"accountID\",\"type\":\"long\"},{\"name\":\"instrumentID\",\"type\":\"long\"},{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"exchangeTransactionID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"orderID\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long transactionID;
  @Deprecated public String createDate;
  @Deprecated public double qty;
  @Deprecated public double price;
  @Deprecated public com.aqitrade.raduga.messagebus.messages.TransactionDirection direction;
  @Deprecated public long portfolioID;
  @Deprecated public long accountID;
  @Deprecated public long instrumentID;
  @Deprecated public double value;
  @Deprecated public String exchangeTransactionID;
  @Deprecated public long orderID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public TransactionMessage() {}

  /**
   * All-args constructor.
   */
  public TransactionMessage(Long transactionID, String createDate, Double qty, Double price, com.aqitrade.raduga.messagebus.messages.TransactionDirection direction, Long portfolioID, Long accountID, Long instrumentID, Double value, String exchangeTransactionID, Long orderID) {
    this.transactionID = transactionID;
    this.createDate = createDate;
    this.qty = qty;
    this.price = price;
    this.direction = direction;
    this.portfolioID = portfolioID;
    this.accountID = accountID;
    this.instrumentID = instrumentID;
    this.value = value;
    this.exchangeTransactionID = exchangeTransactionID;
    this.orderID = orderID;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return transactionID;
    case 1: return createDate;
    case 2: return qty;
    case 3: return price;
    case 4: return direction;
    case 5: return portfolioID;
    case 6: return accountID;
    case 7: return instrumentID;
    case 8: return value;
    case 9: return exchangeTransactionID;
    case 10: return orderID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: transactionID = (Long)value$; break;
    case 1: createDate = (String)value$; break;
    case 2: qty = (Double)value$; break;
    case 3: price = (Double)value$; break;
    case 4: direction = (com.aqitrade.raduga.messagebus.messages.TransactionDirection)value$; break;
    case 5: portfolioID = (Long)value$; break;
    case 6: accountID = (Long)value$; break;
    case 7: instrumentID = (Long)value$; break;
    case 8: value = (Double)value$; break;
    case 9: exchangeTransactionID = (String)value$; break;
    case 10: orderID = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transactionID' field.
   */
  public Long getTransactionID() {
    return transactionID;
  }

  /**
   * Sets the value of the 'transactionID' field.
   * @param value the value to set.
   */
  public void setTransactionID(Long value) {
    this.transactionID = value;
  }

  /**
   * Gets the value of the 'createDate' field.
   */
  public String getCreateDate() {
    return createDate;
  }

  /**
   * Sets the value of the 'createDate' field.
   * @param value the value to set.
   */
  public void setCreateDate(String value) {
    this.createDate = value;
  }

  /**
   * Gets the value of the 'qty' field.
   */
  public Double getQty() {
    return qty;
  }

  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(Double value) {
    this.qty = value;
  }

  /**
   * Gets the value of the 'price' field.
   */
  public Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'direction' field.
   */
  public com.aqitrade.raduga.messagebus.messages.TransactionDirection getDirection() {
    return direction;
  }

  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(com.aqitrade.raduga.messagebus.messages.TransactionDirection value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'portfolioID' field.
   */
  public Long getPortfolioID() {
    return portfolioID;
  }

  /**
   * Sets the value of the 'portfolioID' field.
   * @param value the value to set.
   */
  public void setPortfolioID(Long value) {
    this.portfolioID = value;
  }

  /**
   * Gets the value of the 'accountID' field.
   */
  public Long getAccountID() {
    return accountID;
  }

  /**
   * Sets the value of the 'accountID' field.
   * @param value the value to set.
   */
  public void setAccountID(Long value) {
    this.accountID = value;
  }

  /**
   * Gets the value of the 'instrumentID' field.
   */
  public Long getInstrumentID() {
    return instrumentID;
  }

  /**
   * Sets the value of the 'instrumentID' field.
   * @param value the value to set.
   */
  public void setInstrumentID(Long value) {
    this.instrumentID = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public Double getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(Double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'exchangeTransactionID' field.
   */
  public String getExchangeTransactionID() {
    return exchangeTransactionID;
  }

  /**
   * Sets the value of the 'exchangeTransactionID' field.
   * @param value the value to set.
   */
  public void setExchangeTransactionID(String value) {
    this.exchangeTransactionID = value;
  }

  /**
   * Gets the value of the 'orderID' field.
   */
  public Long getOrderID() {
    return orderID;
  }

  /**
   * Sets the value of the 'orderID' field.
   * @param value the value to set.
   */
  public void setOrderID(Long value) {
    this.orderID = value;
  }

  /** Creates a new TransactionMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new TransactionMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new TransactionMessage RecordBuilder by copying an existing TransactionMessage instance */
  public static Builder newBuilder(TransactionMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for TransactionMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionMessage>
    implements org.apache.avro.data.RecordBuilder<TransactionMessage> {

    private long transactionID;
    private String createDate;
    private double qty;
    private double price;
    private com.aqitrade.raduga.messagebus.messages.TransactionDirection direction;
    private long portfolioID;
    private long accountID;
    private long instrumentID;
    private double value;
    private String exchangeTransactionID;
    private long orderID;

    /** Creates a new Builder */
    private Builder() {
      super(TransactionMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionID)) {
        this.transactionID = data().deepCopy(fields()[0].schema(), other.transactionID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createDate)) {
        this.createDate = data().deepCopy(fields()[1].schema(), other.createDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qty)) {
        this.qty = data().deepCopy(fields()[2].schema(), other.qty);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.direction)) {
        this.direction = data().deepCopy(fields()[4].schema(), other.direction);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.portfolioID)) {
        this.portfolioID = data().deepCopy(fields()[5].schema(), other.portfolioID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.accountID)) {
        this.accountID = data().deepCopy(fields()[6].schema(), other.accountID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.instrumentID)) {
        this.instrumentID = data().deepCopy(fields()[7].schema(), other.instrumentID);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.value)) {
        this.value = data().deepCopy(fields()[8].schema(), other.value);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.exchangeTransactionID)) {
        this.exchangeTransactionID = data().deepCopy(fields()[9].schema(), other.exchangeTransactionID);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.orderID)) {
        this.orderID = data().deepCopy(fields()[10].schema(), other.orderID);
        fieldSetFlags()[10] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TransactionMessage instance */
    private Builder(TransactionMessage other) {
            super(TransactionMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.transactionID)) {
        this.transactionID = data().deepCopy(fields()[0].schema(), other.transactionID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createDate)) {
        this.createDate = data().deepCopy(fields()[1].schema(), other.createDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qty)) {
        this.qty = data().deepCopy(fields()[2].schema(), other.qty);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.direction)) {
        this.direction = data().deepCopy(fields()[4].schema(), other.direction);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.portfolioID)) {
        this.portfolioID = data().deepCopy(fields()[5].schema(), other.portfolioID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.accountID)) {
        this.accountID = data().deepCopy(fields()[6].schema(), other.accountID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.instrumentID)) {
        this.instrumentID = data().deepCopy(fields()[7].schema(), other.instrumentID);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.value)) {
        this.value = data().deepCopy(fields()[8].schema(), other.value);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.exchangeTransactionID)) {
        this.exchangeTransactionID = data().deepCopy(fields()[9].schema(), other.exchangeTransactionID);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.orderID)) {
        this.orderID = data().deepCopy(fields()[10].schema(), other.orderID);
        fieldSetFlags()[10] = true;
      }
    }

    /** Gets the value of the 'transactionID' field */
    public Long getTransactionID() {
      return transactionID;
    }
    
    /** Sets the value of the 'transactionID' field */
    public Builder setTransactionID(long value) {
      validate(fields()[0], value);
      this.transactionID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'transactionID' field has been set */
    public boolean hasTransactionID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'transactionID' field */
    public Builder clearTransactionID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'createDate' field */
    public String getCreateDate() {
      return createDate;
    }
    
    /** Sets the value of the 'createDate' field */
    public Builder setCreateDate(String value) {
      validate(fields()[1], value);
      this.createDate = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'createDate' field has been set */
    public boolean hasCreateDate() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'createDate' field */
    public Builder clearCreateDate() {
      createDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'qty' field */
    public Double getQty() {
      return qty;
    }
    
    /** Sets the value of the 'qty' field */
    public Builder setQty(double value) {
      validate(fields()[2], value);
      this.qty = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'qty' field has been set */
    public boolean hasQty() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'qty' field */
    public Builder clearQty() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'price' field */
    public Double getPrice() {
      return price;
    }
    
    /** Sets the value of the 'price' field */
    public Builder setPrice(double value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'price' field has been set */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'price' field */
    public Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'direction' field */
    public com.aqitrade.raduga.messagebus.messages.TransactionDirection getDirection() {
      return direction;
    }
    
    /** Sets the value of the 'direction' field */
    public Builder setDirection(com.aqitrade.raduga.messagebus.messages.TransactionDirection value) {
      validate(fields()[4], value);
      this.direction = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'direction' field has been set */
    public boolean hasDirection() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'direction' field */
    public Builder clearDirection() {
      direction = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'portfolioID' field */
    public Long getPortfolioID() {
      return portfolioID;
    }
    
    /** Sets the value of the 'portfolioID' field */
    public Builder setPortfolioID(long value) {
      validate(fields()[5], value);
      this.portfolioID = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'portfolioID' field has been set */
    public boolean hasPortfolioID() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'portfolioID' field */
    public Builder clearPortfolioID() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'accountID' field */
    public Long getAccountID() {
      return accountID;
    }
    
    /** Sets the value of the 'accountID' field */
    public Builder setAccountID(long value) {
      validate(fields()[6], value);
      this.accountID = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'accountID' field has been set */
    public boolean hasAccountID() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'accountID' field */
    public Builder clearAccountID() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'instrumentID' field */
    public Long getInstrumentID() {
      return instrumentID;
    }
    
    /** Sets the value of the 'instrumentID' field */
    public Builder setInstrumentID(long value) {
      validate(fields()[7], value);
      this.instrumentID = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'instrumentID' field has been set */
    public boolean hasInstrumentID() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'instrumentID' field */
    public Builder clearInstrumentID() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'value' field */
    public Double getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public Builder setValue(double value) {
      validate(fields()[8], value);
      this.value = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'value' field */
    public Builder clearValue() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'exchangeTransactionID' field */
    public String getExchangeTransactionID() {
      return exchangeTransactionID;
    }
    
    /** Sets the value of the 'exchangeTransactionID' field */
    public Builder setExchangeTransactionID(String value) {
      validate(fields()[9], value);
      this.exchangeTransactionID = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'exchangeTransactionID' field has been set */
    public boolean hasExchangeTransactionID() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'exchangeTransactionID' field */
    public Builder clearExchangeTransactionID() {
      exchangeTransactionID = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'orderID' field */
    public Long getOrderID() {
      return orderID;
    }
    
    /** Sets the value of the 'orderID' field */
    public Builder setOrderID(long value) {
      validate(fields()[10], value);
      this.orderID = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'orderID' field has been set */
    public boolean hasOrderID() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'orderID' field */
    public Builder clearOrderID() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public TransactionMessage build() {
      try {
        TransactionMessage record = new TransactionMessage();
        record.transactionID = fieldSetFlags()[0] ? this.transactionID : (Long) defaultValue(fields()[0]);
        record.createDate = fieldSetFlags()[1] ? this.createDate : (String) defaultValue(fields()[1]);
        record.qty = fieldSetFlags()[2] ? this.qty : (Double) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (Double) defaultValue(fields()[3]);
        record.direction = fieldSetFlags()[4] ? this.direction : (com.aqitrade.raduga.messagebus.messages.TransactionDirection) defaultValue(fields()[4]);
        record.portfolioID = fieldSetFlags()[5] ? this.portfolioID : (Long) defaultValue(fields()[5]);
        record.accountID = fieldSetFlags()[6] ? this.accountID : (Long) defaultValue(fields()[6]);
        record.instrumentID = fieldSetFlags()[7] ? this.instrumentID : (Long) defaultValue(fields()[7]);
        record.value = fieldSetFlags()[8] ? this.value : (Double) defaultValue(fields()[8]);
        record.exchangeTransactionID = fieldSetFlags()[9] ? this.exchangeTransactionID : (String) defaultValue(fields()[9]);
        record.orderID = fieldSetFlags()[10] ? this.orderID : (Long) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
