/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AccountStatusMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountStatusMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"accountId\",\"type\":\"long\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"AccountStatus\",\"symbols\":[\"account_status_ok\",\"account_status_failure\"]}},{\"name\":\"statusMessage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"connectionStatus\",\"type\":{\"type\":\"enum\",\"name\":\"ConnectionStatus\",\"symbols\":[\"connection_status_ok\",\"connection_status_failure\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long accountId;
  @Deprecated public AccountStatus status;
  @Deprecated public String statusMessage;
  @Deprecated public String createDate;
  @Deprecated public ConnectionStatus connectionStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public AccountStatusMessage() {}

  /**
   * All-args constructor.
   */
  public AccountStatusMessage(Long accountId, AccountStatus status, String statusMessage, String createDate, ConnectionStatus connectionStatus) {
    this.accountId = accountId;
    this.status = status;
    this.statusMessage = statusMessage;
    this.createDate = createDate;
    this.connectionStatus = connectionStatus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return accountId;
    case 1: return status;
    case 2: return statusMessage;
    case 3: return createDate;
    case 4: return connectionStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: accountId = (Long)value$; break;
    case 1: status = (AccountStatus)value$; break;
    case 2: statusMessage = (String)value$; break;
    case 3: createDate = (String)value$; break;
    case 4: connectionStatus = (ConnectionStatus)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accountId' field.
   */
  public Long getAccountId() {
    return accountId;
  }

  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(Long value) {
    this.accountId = value;
  }

  /**
   * Gets the value of the 'status' field.
   */
  public AccountStatus getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(AccountStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'statusMessage' field.
   */
  public String getStatusMessage() {
    return statusMessage;
  }

  /**
   * Sets the value of the 'statusMessage' field.
   * @param value the value to set.
   */
  public void setStatusMessage(String value) {
    this.statusMessage = value;
  }

  /**
   * Gets the value of the 'createDate' field.
   */
  public String getCreateDate() {
    return createDate;
  }

  /**
   * Sets the value of the 'createDate' field.
   * @param value the value to set.
   */
  public void setCreateDate(String value) {
    this.createDate = value;
  }

  /**
   * Gets the value of the 'connectionStatus' field.
   */
  public ConnectionStatus getConnectionStatus() {
    return connectionStatus;
  }

  /**
   * Sets the value of the 'connectionStatus' field.
   * @param value the value to set.
   */
  public void setConnectionStatus(ConnectionStatus value) {
    this.connectionStatus = value;
  }

  /** Creates a new AccountStatusMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new AccountStatusMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new AccountStatusMessage RecordBuilder by copying an existing AccountStatusMessage instance */
  public static Builder newBuilder(AccountStatusMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for AccountStatusMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountStatusMessage>
    implements org.apache.avro.data.RecordBuilder<AccountStatusMessage> {

    private long accountId;
    private AccountStatus status;
    private String statusMessage;
    private String createDate;
    private ConnectionStatus connectionStatus;

    /** Creates a new Builder */
    private Builder() {
      super(AccountStatusMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountId)) {
        this.accountId = data().deepCopy(fields()[0].schema(), other.accountId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.statusMessage)) {
        this.statusMessage = data().deepCopy(fields()[2].schema(), other.statusMessage);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createDate)) {
        this.createDate = data().deepCopy(fields()[3].schema(), other.createDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.connectionStatus)) {
        this.connectionStatus = data().deepCopy(fields()[4].schema(), other.connectionStatus);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AccountStatusMessage instance */
    private Builder(AccountStatusMessage other) {
            super(AccountStatusMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.accountId)) {
        this.accountId = data().deepCopy(fields()[0].schema(), other.accountId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.statusMessage)) {
        this.statusMessage = data().deepCopy(fields()[2].schema(), other.statusMessage);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.createDate)) {
        this.createDate = data().deepCopy(fields()[3].schema(), other.createDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.connectionStatus)) {
        this.connectionStatus = data().deepCopy(fields()[4].schema(), other.connectionStatus);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'accountId' field */
    public Long getAccountId() {
      return accountId;
    }
    
    /** Sets the value of the 'accountId' field */
    public Builder setAccountId(long value) {
      validate(fields()[0], value);
      this.accountId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'accountId' field has been set */
    public boolean hasAccountId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'accountId' field */
    public Builder clearAccountId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'status' field */
    public AccountStatus getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public Builder setStatus(AccountStatus value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'status' field */
    public Builder clearStatus() {
      status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'statusMessage' field */
    public String getStatusMessage() {
      return statusMessage;
    }
    
    /** Sets the value of the 'statusMessage' field */
    public Builder setStatusMessage(String value) {
      validate(fields()[2], value);
      this.statusMessage = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'statusMessage' field has been set */
    public boolean hasStatusMessage() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'statusMessage' field */
    public Builder clearStatusMessage() {
      statusMessage = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'createDate' field */
    public String getCreateDate() {
      return createDate;
    }
    
    /** Sets the value of the 'createDate' field */
    public Builder setCreateDate(String value) {
      validate(fields()[3], value);
      this.createDate = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'createDate' field has been set */
    public boolean hasCreateDate() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'createDate' field */
    public Builder clearCreateDate() {
      createDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'connectionStatus' field */
    public ConnectionStatus getConnectionStatus() {
      return connectionStatus;
    }
    
    /** Sets the value of the 'connectionStatus' field */
    public Builder setConnectionStatus(ConnectionStatus value) {
      validate(fields()[4], value);
      this.connectionStatus = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'connectionStatus' field has been set */
    public boolean hasConnectionStatus() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'connectionStatus' field */
    public Builder clearConnectionStatus() {
      connectionStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public AccountStatusMessage build() {
      try {
        AccountStatusMessage record = new AccountStatusMessage();
        record.accountId = fieldSetFlags()[0] ? this.accountId : (Long) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (AccountStatus) defaultValue(fields()[1]);
        record.statusMessage = fieldSetFlags()[2] ? this.statusMessage : (String) defaultValue(fields()[2]);
        record.createDate = fieldSetFlags()[3] ? this.createDate : (String) defaultValue(fields()[3]);
        record.connectionStatus = fieldSetFlags()[4] ? this.connectionStatus : (ConnectionStatus) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
