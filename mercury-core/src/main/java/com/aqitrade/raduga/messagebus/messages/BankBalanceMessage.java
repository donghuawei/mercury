/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BankBalanceMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BankBalanceMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"transferId\",\"type\":\"long\"},{\"name\":\"brokerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountID\",\"type\":\"long\"},{\"name\":\"accountAuthId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tradeCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankBranchID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"currencyID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bankFetchAmount\",\"type\":\"double\"},{\"name\":\"errorID\",\"type\":\"long\"},{\"name\":\"errorMsg\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long transferId;
  @Deprecated public String brokerId;
  @Deprecated public long accountID;
  @Deprecated public String accountAuthId;
  @Deprecated public String tradeCode;
  @Deprecated public String bankID;
  @Deprecated public String bankBranchID;
  @Deprecated public String currencyID;
  @Deprecated public double bankFetchAmount;
  @Deprecated public long errorID;
  @Deprecated public String errorMsg;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public BankBalanceMessage() {}

  /**
   * All-args constructor.
   */
  public BankBalanceMessage(Long transferId, String brokerId, Long accountID, String accountAuthId, String tradeCode, String bankID, String bankBranchID, String currencyID, Double bankFetchAmount, Long errorID, String errorMsg) {
    this.transferId = transferId;
    this.brokerId = brokerId;
    this.accountID = accountID;
    this.accountAuthId = accountAuthId;
    this.tradeCode = tradeCode;
    this.bankID = bankID;
    this.bankBranchID = bankBranchID;
    this.currencyID = currencyID;
    this.bankFetchAmount = bankFetchAmount;
    this.errorID = errorID;
    this.errorMsg = errorMsg;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return transferId;
    case 1: return brokerId;
    case 2: return accountID;
    case 3: return accountAuthId;
    case 4: return tradeCode;
    case 5: return bankID;
    case 6: return bankBranchID;
    case 7: return currencyID;
    case 8: return bankFetchAmount;
    case 9: return errorID;
    case 10: return errorMsg;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: transferId = (Long)value$; break;
    case 1: brokerId = (String)value$; break;
    case 2: accountID = (Long)value$; break;
    case 3: accountAuthId = (String)value$; break;
    case 4: tradeCode = (String)value$; break;
    case 5: bankID = (String)value$; break;
    case 6: bankBranchID = (String)value$; break;
    case 7: currencyID = (String)value$; break;
    case 8: bankFetchAmount = (Double)value$; break;
    case 9: errorID = (Long)value$; break;
    case 10: errorMsg = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transferId' field.
   */
  public Long getTransferId() {
    return transferId;
  }

  /**
   * Sets the value of the 'transferId' field.
   * @param value the value to set.
   */
  public void setTransferId(Long value) {
    this.transferId = value;
  }

  /**
   * Gets the value of the 'brokerId' field.
   */
  public String getBrokerId() {
    return brokerId;
  }

  /**
   * Sets the value of the 'brokerId' field.
   * @param value the value to set.
   */
  public void setBrokerId(String value) {
    this.brokerId = value;
  }

  /**
   * Gets the value of the 'accountID' field.
   */
  public Long getAccountID() {
    return accountID;
  }

  /**
   * Sets the value of the 'accountID' field.
   * @param value the value to set.
   */
  public void setAccountID(Long value) {
    this.accountID = value;
  }

  /**
   * Gets the value of the 'accountAuthId' field.
   */
  public String getAccountAuthId() {
    return accountAuthId;
  }

  /**
   * Sets the value of the 'accountAuthId' field.
   * @param value the value to set.
   */
  public void setAccountAuthId(String value) {
    this.accountAuthId = value;
  }

  /**
   * Gets the value of the 'tradeCode' field.
   */
  public String getTradeCode() {
    return tradeCode;
  }

  /**
   * Sets the value of the 'tradeCode' field.
   * @param value the value to set.
   */
  public void setTradeCode(String value) {
    this.tradeCode = value;
  }

  /**
   * Gets the value of the 'bankID' field.
   */
  public String getBankID() {
    return bankID;
  }

  /**
   * Sets the value of the 'bankID' field.
   * @param value the value to set.
   */
  public void setBankID(String value) {
    this.bankID = value;
  }

  /**
   * Gets the value of the 'bankBranchID' field.
   */
  public String getBankBranchID() {
    return bankBranchID;
  }

  /**
   * Sets the value of the 'bankBranchID' field.
   * @param value the value to set.
   */
  public void setBankBranchID(String value) {
    this.bankBranchID = value;
  }

  /**
   * Gets the value of the 'currencyID' field.
   */
  public String getCurrencyID() {
    return currencyID;
  }

  /**
   * Sets the value of the 'currencyID' field.
   * @param value the value to set.
   */
  public void setCurrencyID(String value) {
    this.currencyID = value;
  }

  /**
   * Gets the value of the 'bankFetchAmount' field.
   */
  public Double getBankFetchAmount() {
    return bankFetchAmount;
  }

  /**
   * Sets the value of the 'bankFetchAmount' field.
   * @param value the value to set.
   */
  public void setBankFetchAmount(Double value) {
    this.bankFetchAmount = value;
  }

  /**
   * Gets the value of the 'errorID' field.
   */
  public Long getErrorID() {
    return errorID;
  }

  /**
   * Sets the value of the 'errorID' field.
   * @param value the value to set.
   */
  public void setErrorID(Long value) {
    this.errorID = value;
  }

  /**
   * Gets the value of the 'errorMsg' field.
   */
  public String getErrorMsg() {
    return errorMsg;
  }

  /**
   * Sets the value of the 'errorMsg' field.
   * @param value the value to set.
   */
  public void setErrorMsg(String value) {
    this.errorMsg = value;
  }

  /** Creates a new BankBalanceMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new BankBalanceMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new BankBalanceMessage RecordBuilder by copying an existing BankBalanceMessage instance */
  public static Builder newBuilder(BankBalanceMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for BankBalanceMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BankBalanceMessage>
    implements org.apache.avro.data.RecordBuilder<BankBalanceMessage> {

    private long transferId;
    private String brokerId;
    private long accountID;
    private String accountAuthId;
    private String tradeCode;
    private String bankID;
    private String bankBranchID;
    private String currencyID;
    private double bankFetchAmount;
    private long errorID;
    private String errorMsg;

    /** Creates a new Builder */
    private Builder() {
      super(BankBalanceMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transferId)) {
        this.transferId = data().deepCopy(fields()[0].schema(), other.transferId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[1].schema(), other.brokerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountID)) {
        this.accountID = data().deepCopy(fields()[2].schema(), other.accountID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountAuthId)) {
        this.accountAuthId = data().deepCopy(fields()[3].schema(), other.accountAuthId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tradeCode)) {
        this.tradeCode = data().deepCopy(fields()[4].schema(), other.tradeCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bankID)) {
        this.bankID = data().deepCopy(fields()[5].schema(), other.bankID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bankBranchID)) {
        this.bankBranchID = data().deepCopy(fields()[6].schema(), other.bankBranchID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.currencyID)) {
        this.currencyID = data().deepCopy(fields()[7].schema(), other.currencyID);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bankFetchAmount)) {
        this.bankFetchAmount = data().deepCopy(fields()[8].schema(), other.bankFetchAmount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.errorID)) {
        this.errorID = data().deepCopy(fields()[9].schema(), other.errorID);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.errorMsg)) {
        this.errorMsg = data().deepCopy(fields()[10].schema(), other.errorMsg);
        fieldSetFlags()[10] = true;
      }
    }
    
    /** Creates a Builder by copying an existing BankBalanceMessage instance */
    private Builder(BankBalanceMessage other) {
            super(BankBalanceMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.transferId)) {
        this.transferId = data().deepCopy(fields()[0].schema(), other.transferId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[1].schema(), other.brokerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountID)) {
        this.accountID = data().deepCopy(fields()[2].schema(), other.accountID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountAuthId)) {
        this.accountAuthId = data().deepCopy(fields()[3].schema(), other.accountAuthId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tradeCode)) {
        this.tradeCode = data().deepCopy(fields()[4].schema(), other.tradeCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bankID)) {
        this.bankID = data().deepCopy(fields()[5].schema(), other.bankID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bankBranchID)) {
        this.bankBranchID = data().deepCopy(fields()[6].schema(), other.bankBranchID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.currencyID)) {
        this.currencyID = data().deepCopy(fields()[7].schema(), other.currencyID);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bankFetchAmount)) {
        this.bankFetchAmount = data().deepCopy(fields()[8].schema(), other.bankFetchAmount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.errorID)) {
        this.errorID = data().deepCopy(fields()[9].schema(), other.errorID);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.errorMsg)) {
        this.errorMsg = data().deepCopy(fields()[10].schema(), other.errorMsg);
        fieldSetFlags()[10] = true;
      }
    }

    /** Gets the value of the 'transferId' field */
    public Long getTransferId() {
      return transferId;
    }
    
    /** Sets the value of the 'transferId' field */
    public Builder setTransferId(long value) {
      validate(fields()[0], value);
      this.transferId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'transferId' field has been set */
    public boolean hasTransferId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'transferId' field */
    public Builder clearTransferId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'brokerId' field */
    public String getBrokerId() {
      return brokerId;
    }
    
    /** Sets the value of the 'brokerId' field */
    public Builder setBrokerId(String value) {
      validate(fields()[1], value);
      this.brokerId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'brokerId' field has been set */
    public boolean hasBrokerId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'brokerId' field */
    public Builder clearBrokerId() {
      brokerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'accountID' field */
    public Long getAccountID() {
      return accountID;
    }
    
    /** Sets the value of the 'accountID' field */
    public Builder setAccountID(long value) {
      validate(fields()[2], value);
      this.accountID = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'accountID' field has been set */
    public boolean hasAccountID() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'accountID' field */
    public Builder clearAccountID() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'accountAuthId' field */
    public String getAccountAuthId() {
      return accountAuthId;
    }
    
    /** Sets the value of the 'accountAuthId' field */
    public Builder setAccountAuthId(String value) {
      validate(fields()[3], value);
      this.accountAuthId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'accountAuthId' field has been set */
    public boolean hasAccountAuthId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'accountAuthId' field */
    public Builder clearAccountAuthId() {
      accountAuthId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'tradeCode' field */
    public String getTradeCode() {
      return tradeCode;
    }
    
    /** Sets the value of the 'tradeCode' field */
    public Builder setTradeCode(String value) {
      validate(fields()[4], value);
      this.tradeCode = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'tradeCode' field has been set */
    public boolean hasTradeCode() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'tradeCode' field */
    public Builder clearTradeCode() {
      tradeCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'bankID' field */
    public String getBankID() {
      return bankID;
    }
    
    /** Sets the value of the 'bankID' field */
    public Builder setBankID(String value) {
      validate(fields()[5], value);
      this.bankID = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'bankID' field has been set */
    public boolean hasBankID() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'bankID' field */
    public Builder clearBankID() {
      bankID = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'bankBranchID' field */
    public String getBankBranchID() {
      return bankBranchID;
    }
    
    /** Sets the value of the 'bankBranchID' field */
    public Builder setBankBranchID(String value) {
      validate(fields()[6], value);
      this.bankBranchID = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'bankBranchID' field has been set */
    public boolean hasBankBranchID() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'bankBranchID' field */
    public Builder clearBankBranchID() {
      bankBranchID = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'currencyID' field */
    public String getCurrencyID() {
      return currencyID;
    }
    
    /** Sets the value of the 'currencyID' field */
    public Builder setCurrencyID(String value) {
      validate(fields()[7], value);
      this.currencyID = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'currencyID' field has been set */
    public boolean hasCurrencyID() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'currencyID' field */
    public Builder clearCurrencyID() {
      currencyID = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'bankFetchAmount' field */
    public Double getBankFetchAmount() {
      return bankFetchAmount;
    }
    
    /** Sets the value of the 'bankFetchAmount' field */
    public Builder setBankFetchAmount(double value) {
      validate(fields()[8], value);
      this.bankFetchAmount = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'bankFetchAmount' field has been set */
    public boolean hasBankFetchAmount() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'bankFetchAmount' field */
    public Builder clearBankFetchAmount() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'errorID' field */
    public Long getErrorID() {
      return errorID;
    }
    
    /** Sets the value of the 'errorID' field */
    public Builder setErrorID(long value) {
      validate(fields()[9], value);
      this.errorID = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'errorID' field has been set */
    public boolean hasErrorID() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'errorID' field */
    public Builder clearErrorID() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'errorMsg' field */
    public String getErrorMsg() {
      return errorMsg;
    }
    
    /** Sets the value of the 'errorMsg' field */
    public Builder setErrorMsg(String value) {
      validate(fields()[10], value);
      this.errorMsg = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'errorMsg' field has been set */
    public boolean hasErrorMsg() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'errorMsg' field */
    public Builder clearErrorMsg() {
      errorMsg = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public BankBalanceMessage build() {
      try {
        BankBalanceMessage record = new BankBalanceMessage();
        record.transferId = fieldSetFlags()[0] ? this.transferId : (Long) defaultValue(fields()[0]);
        record.brokerId = fieldSetFlags()[1] ? this.brokerId : (String) defaultValue(fields()[1]);
        record.accountID = fieldSetFlags()[2] ? this.accountID : (Long) defaultValue(fields()[2]);
        record.accountAuthId = fieldSetFlags()[3] ? this.accountAuthId : (String) defaultValue(fields()[3]);
        record.tradeCode = fieldSetFlags()[4] ? this.tradeCode : (String) defaultValue(fields()[4]);
        record.bankID = fieldSetFlags()[5] ? this.bankID : (String) defaultValue(fields()[5]);
        record.bankBranchID = fieldSetFlags()[6] ? this.bankBranchID : (String) defaultValue(fields()[6]);
        record.currencyID = fieldSetFlags()[7] ? this.currencyID : (String) defaultValue(fields()[7]);
        record.bankFetchAmount = fieldSetFlags()[8] ? this.bankFetchAmount : (Double) defaultValue(fields()[8]);
        record.errorID = fieldSetFlags()[9] ? this.errorID : (Long) defaultValue(fields()[9]);
        record.errorMsg = fieldSetFlags()[10] ? this.errorMsg : (String) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
